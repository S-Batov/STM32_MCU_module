
MCU_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074e0  080074e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074ec  080074ec  000084ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080074f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000000c  080074fc  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080074fc  000093e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd38  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308f  00000000  00000000  00025d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00028e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f6  00000000  00000000  0002a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293e0  00000000  00000000  0002bb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1df  00000000  00000000  00054f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119560  00000000  00000000  0007114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a6ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000703c  00000000  00000000  0018a6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0019172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007488 	.word	0x08007488

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007488 	.word	0x08007488

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f001 f941 	bl	80017ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f818 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fc14 	bl	8000d7c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000554:	f000 f9ee 	bl	8000934 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000558:	f000 fa32 	bl	80009c0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800055c:	f000 faf6 	bl	8000b4c <MX_TIM2_Init>
  MX_TIM8_Init();
 8000560:	f000 fb48 	bl	8000bf4 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000564:	f000 f856 	bl	8000614 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000568:	f000 f8cc 	bl	8000704 <MX_ADC2_Init>
  MX_DAC1_Init();
 800056c:	f000 f9a8 	bl	80008c0 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000570:	f000 fa70 	bl	8000a54 <MX_SPI1_Init>
  MX_ADC3_Init();
 8000574:	f000 f92c 	bl	80007d0 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000578:	f000 faaa 	bl	8000ad0 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x38>

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	@ 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 ff4e 	bl	8007430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a6:	f003 f9b3 	bl	8003910 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80005bc:	2303      	movs	r3, #3
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005c0:	2320      	movs	r3, #32
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fa4f 	bl	8003a78 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005e0:	f000 fc92 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fd4d 	bl	800409c <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000608:	f000 fc7e 	bl	8000f08 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	@ 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2220      	movs	r2, #32
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f006 feff 	bl	8007430 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000634:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800063c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800065c:	2204      	movs	r2, #4
 800065e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800066e:	2201      	movs	r2, #1
 8000670:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4817      	ldr	r0, [pc, #92]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800069e:	f001 fadd 	bl	8001c5c <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a8:	f000 fc2e 	bl	8000f08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006b8:	f002 f8f2 	bl	80028a0 <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006c2:	f000 fc21 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_ADC1_Init+0xec>)
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	@ 0x7f
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006e4:	f001 fc76 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ee:	f000 fc0b 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028
 8000700:	10c00010 	.word	0x10c00010

08000704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fe8d 	bl	8007430 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000718:	4a2b      	ldr	r2, [pc, #172]	@ (80007c8 <MX_ADC2_Init+0xc4>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800071e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800073e:	2204      	movs	r2, #4
 8000740:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000780:	f001 fa6c 	bl	8001c5c <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800078a:	f000 fbbd 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ADC2_Init+0xc8>)
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000792:	2306      	movs	r3, #6
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079a:	237f      	movs	r3, #127	@ 0x7f
 800079c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079e:	2304      	movs	r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 80007ac:	f001 fc12 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007b6:	f000 fba7 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	50000100 	.word	0x50000100
 80007cc:	47520000 	.word	0x47520000

080007d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fe21 	bl	8007430 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ee:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f0:	4a31      	ldr	r2, [pc, #196]	@ (80008b8 <MX_ADC3_Init+0xe8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000816:	2204      	movs	r2, #4
 8000818:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000828:	2201      	movs	r2, #1
 800082a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000856:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000858:	f001 fa00 	bl	8001c5c <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000862:	f000 fb51 	bl	8000f08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000872:	f002 f815 	bl	80028a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 fb44 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_ADC3_Init+0xec>)
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000884:	2306      	movs	r3, #6
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800088c:	237f      	movs	r3, #127	@ 0x7f
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000890:	2304      	movs	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800089e:	f001 fb99 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80008a8:	f000 fb2e 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000100 	.word	0x20000100
 80008b8:	50000400 	.word	0x50000400
 80008bc:	3ac04000 	.word	0x3ac04000

080008c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2230      	movs	r2, #48	@ 0x30
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 fdaf 	bl	8007430 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_DAC1_Init+0x6c>)
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <MX_DAC1_Init+0x70>)
 80008d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008d8:	4814      	ldr	r0, [pc, #80]	@ (800092c <MX_DAC1_Init+0x6c>)
 80008da:	f002 f9f8 	bl	8002cce <HAL_DAC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008e4:	f000 fb10 	bl	8000f08 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008e8:	2302      	movs	r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	2210      	movs	r2, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_DAC1_Init+0x6c>)
 8000914:	f002 f9fe 	bl	8002d14 <HAL_DAC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800091e:	f000 faf3 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	@ 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000016c 	.word	0x2000016c
 8000930:	50000800 	.word	0x50000800

08000934 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800093a:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <MX_FDCAN1_Init+0x88>)
 800093c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000952:	2200      	movs	r2, #0
 8000954:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000958:	2200      	movs	r2, #0
 800095a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800095e:	2200      	movs	r2, #0
 8000960:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000964:	2210      	movs	r2, #16
 8000966:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800096a:	2201      	movs	r2, #1
 800096c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000970:	220d      	movs	r2, #13
 8000972:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000974:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000976:	2202      	movs	r2, #2
 8000978:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800097c:	2201      	movs	r2, #1
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000982:	2201      	movs	r2, #1
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000988:	2201      	movs	r2, #1
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800098e:	2201      	movs	r2, #1
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 8000994:	2200      	movs	r2, #0
 8000996:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_FDCAN1_Init+0x84>)
 80009a6:	f002 fc2f 	bl	8003208 <HAL_FDCAN_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80009b0:	f000 faaa 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000180 	.word	0x20000180
 80009bc:	40006400 	.word	0x40006400

080009c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <MX_LPUART1_UART_Init+0x90>)
 80009c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a02:	4812      	ldr	r0, [pc, #72]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a04:	f005 fae8 	bl	8005fd8 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fa7b 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a16:	f006 fc40 	bl	800729a <HAL_UARTEx_SetTxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a20:	f000 fa72 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a28:	f006 fc75 	bl	8007316 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a32:	f000 fa69 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a38:	f006 fbf6 	bl	8007228 <HAL_UARTEx_DisableFifoMode>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a42:	f000 fa61 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001e4 	.word	0x200001e4
 8000a50:	40008000 	.word	0x40008000

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <MX_SPI1_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a6e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000a72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a8a:	2230      	movs	r2, #48	@ 0x30
 8000a8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_SPI1_Init+0x74>)
 8000ab4:	f003 ff5c 	bl	8004970 <HAL_SPI_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fa23 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000278 	.word	0x20000278
 8000acc:	40013000 	.word	0x40013000

08000ad0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <MX_SPI3_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000adc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000aea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000aee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b1e:	2207      	movs	r2, #7
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_SPI3_Init+0x74>)
 8000b30:	f003 ff1e 	bl	8004970 <HAL_SPI_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 f9e5 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200002dc 	.word	0x200002dc
 8000b48:	40003c00 	.word	0x40003c00

08000b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2224      	movs	r2, #36	@ 0x24
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 fc68 	bl	8007430 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000bbe:	f004 f8f9 	bl	8004db4 <HAL_TIM_Encoder_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bc8:	f000 f99e 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_TIM2_Init+0xa4>)
 8000bda:	f004 ff6b 	bl	8005ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000be4:	f000 f990 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	@ 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000340 	.word	0x20000340

08000bf4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09a      	sub	sp, #104	@ 0x68
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000c06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2234      	movs	r2, #52	@ 0x34
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fbff 	bl	8007430 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c32:	4b50      	ldr	r3, [pc, #320]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c34:	4a50      	ldr	r2, [pc, #320]	@ (8000d78 <MX_TIM8_Init+0x184>)
 8000c36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c38:	4b4e      	ldr	r3, [pc, #312]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c44:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c52:	4b48      	ldr	r3, [pc, #288]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b46      	ldr	r3, [pc, #280]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000c5e:	4845      	ldr	r0, [pc, #276]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c60:	f004 f851 	bl	8004d06 <HAL_TIM_OC_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000c6a:	f000 f94d 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	483c      	ldr	r0, [pc, #240]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000c82:	f004 ff17 	bl	8005ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8000c8c:	f000 f93c 	bl	8000f08 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000c90:	2301      	movs	r3, #1
 8000c92:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000c9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4833      	ldr	r0, [pc, #204]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000ca6:	f005 f82f 	bl	8005d08 <HAL_TIMEx_ConfigBreakInput>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 f92a 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4826      	ldr	r0, [pc, #152]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000cda:	f004 fa61 	bl	80051a0 <HAL_TIM_OC_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000ce4:	f000 f910 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cec:	2204      	movs	r2, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000cf2:	f004 fa55 	bl	80051a0 <HAL_TIM_OC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000cfc:	f000 f904 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d04:	2208      	movs	r2, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	481a      	ldr	r0, [pc, #104]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000d0a:	f004 fa49 	bl	80051a0 <HAL_TIM_OC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8000d14:	f000 f8f8 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000d58:	f004 ff42 	bl	8005be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000d62:	f000 f8d1 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM8_Init+0x180>)
 8000d68:	f000 fc42 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3768      	adds	r7, #104	@ 0x68
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000038c 	.word	0x2000038c
 8000d78:	40013400 	.word	0x40013400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b5a      	ldr	r3, [pc, #360]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a59      	ldr	r2, [pc, #356]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b57      	ldr	r3, [pc, #348]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b54      	ldr	r3, [pc, #336]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a53      	ldr	r2, [pc, #332]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b51      	ldr	r3, [pc, #324]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b4b      	ldr	r3, [pc, #300]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b48      	ldr	r3, [pc, #288]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a47      	ldr	r2, [pc, #284]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b45      	ldr	r3, [pc, #276]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b42      	ldr	r3, [pc, #264]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a41      	ldr	r2, [pc, #260]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b39      	ldr	r3, [pc, #228]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e22:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a35      	ldr	r2, [pc, #212]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b33      	ldr	r3, [pc, #204]	@ (8000efc <MX_GPIO_Init+0x180>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e40:	482f      	ldr	r0, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x184>)
 8000e42:	f002 fd29 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_1_Pin|DOUT_2_EN_Pin|DOUT_1_EN_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000e4c:	482d      	ldr	r0, [pc, #180]	@ (8000f04 <MX_GPIO_Init+0x188>)
 8000e4e:	f002 fd23 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Encoder_Z_Pin */
  GPIO_InitStruct.Pin = Encoder_Z_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Encoder_Z_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f002 fb93 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_2_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_2_Pin|DIN_1_Pin;
 8000e6e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	481e      	ldr	r0, [pc, #120]	@ (8000f00 <MX_GPIO_Init+0x184>)
 8000e86:	f002 fb85 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUT_2_Pin */
  GPIO_InitStruct.Pin = DOUT_2_Pin;
 8000e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DOUT_2_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <MX_GPIO_Init+0x184>)
 8000ea4:	f002 fb76 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_1_Pin DOUT_2_EN_Pin DOUT_1_EN_Pin */
  GPIO_InitStruct.Pin = DOUT_1_Pin|DOUT_2_EN_Pin|DOUT_1_EN_Pin;
 8000ea8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4810      	ldr	r0, [pc, #64]	@ (8000f04 <MX_GPIO_Init+0x188>)
 8000ec2:	f002 fb67 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_2_FB_Pin DOUT_1_FB_Pin */
  GPIO_InitStruct.Pin = DOUT_2_FB_Pin|DOUT_1_FB_Pin;
 8000ec6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_GPIO_Init+0x188>)
 8000ede:	f002 fb59 	bl	8003594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2008      	movs	r0, #8
 8000ee8:	f001 febd 	bl	8002c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000eec:	2008      	movs	r0, #8
 8000eee:	f001 fed4 	bl	8002c9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	@ 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000c00 	.word	0x48000c00

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f4a:	f002 fd85 	bl	8003a58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0a4      	sub	sp, #144	@ 0x90
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f78:	2254      	movs	r2, #84	@ 0x54
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fa57 	bl	8007430 <memset>
  if(hadc->Instance==ADC1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f8a:	d15b      	bne.n	8001044 <HAL_ADC_MspInit+0xe8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fa99 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa8:	f7ff ffae 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fac:	4b75      	ldr	r3, [pc, #468]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a74      	ldr	r2, [pc, #464]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 8000fb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb6:	4b73      	ldr	r3, [pc, #460]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fbe:	4b72      	ldr	r3, [pc, #456]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a71      	ldr	r2, [pc, #452]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a6b      	ldr	r2, [pc, #428]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b69      	ldr	r3, [pc, #420]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b66      	ldr	r3, [pc, #408]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a65      	ldr	r2, [pc, #404]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Resolver_Sin_Pin;
 8001006:	2308      	movs	r3, #8
 8001008:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Resolver_Sin_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001020:	f002 fab8 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_IN2_Pin|AIN_1_Pin;
 8001024:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001028:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800103a:	4619      	mov	r1, r3
 800103c:	4853      	ldr	r0, [pc, #332]	@ (800118c <HAL_ADC_MspInit+0x230>)
 800103e:	f002 faa9 	bl	8003594 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001042:	e09b      	b.n	800117c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <HAL_ADC_MspInit+0x234>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d15a      	bne.n	8001104 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800104e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001054:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001058:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fa38 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_ADC_MspInit+0x112>
      Error_Handler();
 800106a:	f7ff ff4d 	bl	8000f08 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800106e:	4b45      	ldr	r3, [pc, #276]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a43      	ldr	r2, [pc, #268]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 8001076:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001078:	4b42      	ldr	r3, [pc, #264]	@ (8001184 <HAL_ADC_MspInit+0x228>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10b      	bne.n	8001098 <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001080:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	4a40      	ldr	r2, [pc, #256]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001086:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800108a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108c:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	4a3a      	ldr	r2, [pc, #232]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a4:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Resolver_Cos_Pin|T_Ambient_Pin|T_IGBT_Pin;
 80010c8:	23d0      	movs	r3, #208	@ 0xd0
 80010ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f002 fa57 	bl	8003594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T_Motor_Pin;
 80010e6:	2310      	movs	r3, #16
 80010e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(T_Motor_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4825      	ldr	r0, [pc, #148]	@ (8001194 <HAL_ADC_MspInit+0x238>)
 80010fe:	f002 fa49 	bl	8003594 <HAL_GPIO_Init>
}
 8001102:	e03b      	b.n	800117c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <HAL_ADC_MspInit+0x23c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d136      	bne.n	800117c <HAL_ADC_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800110e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001118:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111e:	4618      	mov	r0, r3
 8001120:	f003 f9d8 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0x1d2>
      Error_Handler();
 800112a:	f7ff feed 	bl	8000f08 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_ADC_MspInit+0x22c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_DC_Hi_Pin|I_DC_Lo_Pin|I_U_Hi_Pin|I_U_Lo_Pin
 800115e:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8001162:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001164:	2303      	movs	r3, #3
 8001166:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001170:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001174:	4619      	mov	r1, r3
 8001176:	4809      	ldr	r0, [pc, #36]	@ (800119c <HAL_ADC_MspInit+0x240>)
 8001178:	f002 fa0c 	bl	8003594 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3790      	adds	r7, #144	@ 0x90
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200003d8 	.word	0x200003d8
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400
 8001190:	50000100 	.word	0x50000100
 8001194:	48000800 	.word	0x48000800
 8001198:	50000400 	.word	0x50000400
 800119c:	48001000 	.word	0x48001000

080011a0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a15      	ldr	r2, [pc, #84]	@ (8001214 <HAL_DAC_MspInit+0x74>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d124      	bne.n	800120c <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_DAC_MspInit+0x78>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Resolver_Exc_Pin;
 80011f2:	2320      	movs	r3, #32
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Resolver_Exc_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f002 f9c4 	bl	8003594 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	@ 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	50000800 	.word	0x50000800
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09e      	sub	sp, #120	@ 0x78
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2254      	movs	r2, #84	@ 0x54
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f006 f8f7 	bl	8007430 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a20      	ldr	r2, [pc, #128]	@ (80012c8 <HAL_FDCAN_MspInit+0xac>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d139      	bne.n	80012c0 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800124c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001250:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001256:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f003 f939 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001268:	f7ff fe4e 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 8001272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001276:	6593      	str	r3, [r2, #88]	@ 0x58
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_FDCAN_MspInit+0xb0>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800129c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012ae:	2309      	movs	r3, #9
 80012b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f002 f96a 	bl	8003594 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80012c0:	bf00      	nop
 80012c2:	3778      	adds	r7, #120	@ 0x78
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40006400 	.word	0x40006400
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09e      	sub	sp, #120	@ 0x78
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2254      	movs	r2, #84	@ 0x54
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 f89d 	bl	8007430 <memset>
  if(huart->Instance==LPUART1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_UART_MspInit+0xb4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d13d      	bne.n	800137c <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001300:	2320      	movs	r3, #32
 8001302:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f8e1 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001318:	f7ff fdf6 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 800131e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 800132a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_UART_MspInit+0xb8>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134c:	2303      	movs	r3, #3
 800134e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800135c:	2308      	movs	r3, #8
 800135e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001364:	4619      	mov	r1, r3
 8001366:	4809      	ldr	r0, [pc, #36]	@ (800138c <HAL_UART_MspInit+0xbc>)
 8001368:	f002 f914 	bl	8003594 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	205b      	movs	r0, #91	@ 0x5b
 8001372:	f001 fc78 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001376:	205b      	movs	r0, #91	@ 0x5b
 8001378:	f001 fc8f 	bl	8002c9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800137c:	bf00      	nop
 800137e:	3778      	adds	r7, #120	@ 0x78
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40008000 	.word	0x40008000
 8001388:	40021000 	.word	0x40021000
 800138c:	48000800 	.word	0x48000800

08001390 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a41      	ldr	r2, [pc, #260]	@ (80014b4 <HAL_SPI_MspInit+0x124>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d130      	bne.n	8001414 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	4b41      	ldr	r3, [pc, #260]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013be:	4b3e      	ldr	r3, [pc, #248]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ca:	4b3b      	ldr	r3, [pc, #236]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a3a      	ldr	r2, [pc, #232]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80013e2:	231c      	movs	r3, #28
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f2:	2305      	movs	r3, #5
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	482f      	ldr	r0, [pc, #188]	@ (80014bc <HAL_SPI_MspInit+0x12c>)
 80013fe:	f002 f8c9 	bl	8003594 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2023      	movs	r0, #35	@ 0x23
 8001408:	f001 fc2d 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800140c:	2023      	movs	r0, #35	@ 0x23
 800140e:	f001 fc44 	bl	8002c9a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001412:	e04a      	b.n	80014aa <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_SPI_MspInit+0x130>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d145      	bne.n	80014aa <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001428:	6593      	str	r3, [r2, #88]	@ 0x58
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a1f      	ldr	r2, [pc, #124]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 8001454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_SPI_MspInit+0x128>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001466:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001478:	2306      	movs	r3, #6
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <HAL_SPI_MspInit+0x134>)
 8001484:	f002 f886 	bl	8003594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800149a:	2306      	movs	r3, #6
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <HAL_SPI_MspInit+0x12c>)
 80014a6:	f002 f875 	bl	8003594 <HAL_GPIO_Init>
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48001800 	.word	0x48001800
 80014c0:	40003c00 	.word	0x40003c00
 80014c4:	48000800 	.word	0x48000800

080014c8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d130      	bne.n	800154c <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 800151a:	2303      	movs	r3, #3
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152a:	2301      	movs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f002 f82c 	bl	8003594 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	201c      	movs	r0, #28
 8001542:	f001 fb90 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001546:	201c      	movs	r0, #28
 8001548:	f001 fba7 	bl	8002c9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM8)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1c      	ldr	r2, [pc, #112]	@ (80015e8 <HAL_TIM_OC_MspInit+0x90>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d131      	bne.n	80015de <HAL_TIM_OC_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 8001580:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001584:	6613      	str	r3, [r2, #96]	@ 0x60
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a15      	ldr	r2, [pc, #84]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_TIM_OC_MspInit+0x94>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA10     ------> TIM8_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM8_COMP1;
 80015bc:	230b      	movs	r3, #11
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f001 ffe3 	bl	8003594 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	202b      	movs	r0, #43	@ 0x2b
 80015d4:	f001 fb47 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 80015d8:	202b      	movs	r0, #43	@ 0x2b
 80015da:	f001 fb5e 	bl	8002c9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40013400 	.word	0x40013400
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <HAL_TIM_MspPostInit+0x9c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d138      	bne.n	8001684 <HAL_TIM_MspPostInit+0x94>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <HAL_TIM_MspPostInit+0xa0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC10     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = PWM_V_L_Pin|PWM_W_L_Pin;
 8001642:	2303      	movs	r3, #3
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001652:	2304      	movs	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <HAL_TIM_MspPostInit+0xa4>)
 800165e:	f001 ff99 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_U_H_Pin|PWM_V_H_Pin|PWM_W_H_Pin|PWM_U_L_Pin;
 8001662:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001674:	2304      	movs	r3, #4
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <HAL_TIM_MspPostInit+0xa8>)
 8001680:	f001 ff88 	bl	8003594 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013400 	.word	0x40013400
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400
 8001698:	48000800 	.word	0x48000800

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 f8bf 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Z_Pin);
 80016fe:	2004      	movs	r0, #4
 8001700:	f002 f8e2 	bl	80038c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <TIM2_IRQHandler+0x10>)
 800170e:	f003 fbf7 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000340 	.word	0x20000340

0800171c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <SPI1_IRQHandler+0x10>)
 8001722:	f003 f9d1 	bl	8004ac8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000278 	.word	0x20000278

08001730 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM8_BRK_IRQHandler+0x10>)
 8001736:	f003 fbe3 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000038c 	.word	0x2000038c

08001744 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <LPUART1_IRQHandler+0x10>)
 800174a:	f004 fc95 	bl	8006078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001e4 	.word	0x200001e4

08001758 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800177e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff ffea 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	@ (80017bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	@ (80017c8 <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f005 fe49 	bl	8007440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ae:	f7fe fec9 	bl	8000544 <main>

080017b2 <LoopForever>:

LoopForever:
    b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   r0, =_estack
 80017b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017c0:	080074f0 	.word	0x080074f0
  ldr r2, =_sbss
 80017c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017c8:	200003e0 	.word	0x200003e0

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>

080017ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f001 fa39 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f80e 	bl	8001800 <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	e001      	b.n	80017f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f0:	f7ff fb90 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]

}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_InitTick+0x68>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d022      	beq.n	800185a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_InitTick+0x6c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_InitTick+0x68>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001820:	fbb1 f3f3 	udiv	r3, r1, r3
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fa44 	bl	8002cb6 <HAL_SYSTICK_Config>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10f      	bne.n	8001854 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	d809      	bhi.n	800184e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183a:	2200      	movs	r2, #0
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f001 fa10 	bl	8002c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_InitTick+0x70>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e007      	b.n	800185e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e004      	b.n	800185e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e001      	b.n	800185e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_IncTick+0x1c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_IncTick+0x20>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4413      	add	r3, r2
 8001882:	4a03      	ldr	r2, [pc, #12]	@ (8001890 <HAL_IncTick+0x1c>)
 8001884:	6013      	str	r3, [r2, #0]
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	200003dc 	.word	0x200003dc
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200003dc 	.word	0x200003dc

080018b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3360      	adds	r3, #96	@ 0x60
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <LL_ADC_SetOffset+0x44>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	4313      	orrs	r3, r2
 8001948:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	03fff000 	.word	0x03fff000

08001960 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3360      	adds	r3, #96	@ 0x60
 800196e:	461a      	mov	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3360      	adds	r3, #96	@ 0x60
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	@ 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3360      	adds	r3, #96	@ 0x60
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	615a      	str	r2, [r3, #20]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3330      	adds	r3, #48	@ 0x30
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	211f      	movs	r1, #31
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 011f 	and.w	r1, r3, #31
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa0:	bf00      	nop
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3314      	adds	r3, #20
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0e5b      	lsrs	r3, r3, #25
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0d1b      	lsrs	r3, r3, #20
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2107      	movs	r1, #7
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0d1b      	lsrs	r3, r3, #20
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0318 	and.w	r3, r3, #24
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b28:	40d9      	lsrs	r1, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0007ffff 	.word	0x0007ffff

08001b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <LL_ADC_IsEnabled+0x18>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <LL_ADC_IsEnabled+0x1a>
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1a9      	b.n	8001fca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff f969 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff67 	bl	8001b70 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff4d 	bl	8001b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff82 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff66 	bl	8001b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8001f40 <HAL_ADC_Init+0x2e4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4a9c      	ldr	r2, [pc, #624]	@ (8001f44 <HAL_ADC_Init+0x2e8>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff64 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff75 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 8001d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8142 	bne.w	8001fb8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 813e 	bne.w	8001fb8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff49 	bl	8001be8 <LL_ADC_IsEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d141      	bne.n	8001de0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d64:	d004      	beq.n	8001d70 <HAL_ADC_Init+0x114>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a77      	ldr	r2, [pc, #476]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10f      	bne.n	8001d90 <HAL_ADC_Init+0x134>
 8001d70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d74:	f7ff ff38 	bl	8001be8 <LL_ADC_IsEnabled>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	4873      	ldr	r0, [pc, #460]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001d7c:	f7ff ff34 	bl	8001be8 <LL_ADC_IsEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4323      	orrs	r3, r4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e012      	b.n	8001db6 <HAL_ADC_Init+0x15a>
 8001d90:	486e      	ldr	r0, [pc, #440]	@ (8001f4c <HAL_ADC_Init+0x2f0>)
 8001d92:	f7ff ff29 	bl	8001be8 <LL_ADC_IsEnabled>
 8001d96:	4604      	mov	r4, r0
 8001d98:	486d      	ldr	r0, [pc, #436]	@ (8001f50 <HAL_ADC_Init+0x2f4>)
 8001d9a:	f7ff ff25 	bl	8001be8 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	431c      	orrs	r4, r3
 8001da2:	486c      	ldr	r0, [pc, #432]	@ (8001f54 <HAL_ADC_Init+0x2f8>)
 8001da4:	f7ff ff20 	bl	8001be8 <LL_ADC_IsEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4323      	orrs	r3, r4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Init+0x172>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x176>
 8001dce:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_ADC_Init+0x2fc>)
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_Init+0x178>
 8001dd2:	4a62      	ldr	r2, [pc, #392]	@ (8001f5c <HAL_ADC_Init+0x300>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7ff fd68 	bl	80018b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7f5b      	ldrb	r3, [r3, #29]
 8001de4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001df0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001df6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d106      	bne.n	8001e1c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	045b      	lsls	r3, r3, #17
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <HAL_ADC_Init+0x304>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fee4 	bl	8001c34 <LL_ADC_INJ_IsConversionOngoing>
 8001e6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d17f      	bne.n	8001f74 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d17c      	bne.n	8001f74 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d017      	beq.n	8001edc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001eba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ec4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6911      	ldr	r1, [r2, #16]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001eda:	e013      	b.n	8001f04 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d12a      	bne.n	8001f64 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f30:	430a      	orrs	r2, r1
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	e019      	b.n	8001f74 <HAL_ADC_Init+0x318>
 8001f40:	20000000 	.word	0x20000000
 8001f44:	053e2d63 	.word	0x053e2d63
 8001f48:	50000100 	.word	0x50000100
 8001f4c:	50000400 	.word	0x50000400
 8001f50:	50000500 	.word	0x50000500
 8001f54:	50000600 	.word	0x50000600
 8001f58:	50000300 	.word	0x50000300
 8001f5c:	50000700 	.word	0x50000700
 8001f60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f023 010f 	bic.w	r1, r3, #15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 020f 	bic.w	r2, r2, #15
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop

08001fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0b6      	sub	sp, #216	@ 0xd8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x24>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f000 bc13 	b.w	800281e <HAL_ADC_ConfigChannel+0x84a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe02 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 83f3 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f7ff fd18 	bl	8001a54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdf0 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 800202e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fdfc 	bl	8001c34 <LL_ADC_INJ_IsConversionOngoing>
 800203c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002040:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 81d9 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 81d4 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800205c:	d10f      	bne.n	800207e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	f7ff fd1f 	bl	8001aac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fcd9 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonConfig>
 800207c:	e00e      	b.n	800209c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	461a      	mov	r2, r3
 800208c:	f7ff fd0e 	bl	8001aac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fcc9 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d022      	beq.n	8002104 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020ce:	f7ff fc23 	bl	8001918 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fc6f 	bl	80019c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x126>
 80020f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f8:	e000      	b.n	80020fc <HAL_ADC_ConfigChannel+0x128>
 80020fa:	2300      	movs	r3, #0
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7ff fc7b 	bl	80019f8 <LL_ADC_SetOffsetSaturation>
 8002102:	e17b      	b.n	80023fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc28 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x15c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc1d 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	e01e      	b.n	800216e <HAL_ADC_ConfigChannel+0x19a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc12 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800214e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e004      	b.n	800216c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x1b2>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	e018      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1e4>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800219a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e004      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fbe1 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbc5 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x222>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fbba 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	e01e      	b.n	8002234 <HAL_ADC_ConfigChannel+0x260>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fbaf 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002218:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e004      	b.n	8002232 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_ADC_ConfigChannel+0x278>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	e018      	b.n	800227e <HAL_ADC_ConfigChannel+0x2aa>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e004      	b.n	800227e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800227e:	429a      	cmp	r2, r3
 8002280:	d106      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb7e 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb62 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x2e8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2102      	movs	r1, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb57 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	f003 021f 	and.w	r2, r3, #31
 80022ba:	e01e      	b.n	80022fa <HAL_ADC_ConfigChannel+0x326>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fb4c 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e004      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x33e>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	0e9b      	lsrs	r3, r3, #26
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	e016      	b.n	8002340 <HAL_ADC_ConfigChannel+0x36c>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002324:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800232a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e004      	b.n	8002340 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fb1d 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2103      	movs	r1, #3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb01 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_ADC_ConfigChannel+0x3aa>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2103      	movs	r1, #3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff faf6 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	e017      	b.n	80023ae <HAL_ADC_ConfigChannel+0x3da>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2103      	movs	r1, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff faeb 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002398:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800239a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x3f2>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	e011      	b.n	80023ea <HAL_ADC_ConfigChannel+0x416>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2103      	movs	r1, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fac8 	bl	800198c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fbf1 	bl	8001be8 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 813d 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f7ff fb72 	bl	8001b04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4aa2      	ldr	r2, [pc, #648]	@ (80026b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 812e 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x480>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	3301      	adds	r3, #1
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b09      	cmp	r3, #9
 800244a:	bf94      	ite	ls
 800244c:	2301      	movls	r3, #1
 800244e:	2300      	movhi	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e019      	b.n	8002488 <HAL_ADC_ConfigChannel+0x4b4>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002464:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b09      	cmp	r3, #9
 8002480:	bf94      	ite	ls
 8002482:	2301      	movls	r3, #1
 8002484:	2300      	movhi	r3, #0
 8002486:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002488:	2b00      	cmp	r3, #0
 800248a:	d079      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x4d4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	3301      	adds	r3, #1
 80024a0:	069b      	lsls	r3, r3, #26
 80024a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a6:	e015      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x500>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	069b      	lsls	r3, r3, #26
 80024d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x520>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	e017      	b.n	8002524 <HAL_ADC_ConfigChannel+0x550>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_ADC_ConfigChannel+0x576>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	051b      	lsls	r3, r3, #20
 8002548:	e018      	b.n	800257c <HAL_ADC_ConfigChannel+0x5a8>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257c:	430b      	orrs	r3, r1
 800257e:	e07e      	b.n	800267e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x5c8>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800259a:	e015      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x5f4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x614>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	e017      	b.n	8002618 <HAL_ADC_ConfigChannel+0x644>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	61fb      	str	r3, [r7, #28]
  return result;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	ea42 0103 	orr.w	r1, r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10d      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x670>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	3b1e      	subs	r3, #30
 800263c:	051b      	lsls	r3, r3, #20
 800263e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002642:	e01b      	b.n	800267c <HAL_ADC_ConfigChannel+0x6a8>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	613b      	str	r3, [r7, #16]
  return result;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1e      	subs	r3, #30
 8002676:	051b      	lsls	r3, r3, #20
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002682:	4619      	mov	r1, r3
 8002684:	f7ff fa12 	bl	8001aac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80be 	beq.w	8002812 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269e:	d004      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x6d6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x6ec>
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_ADC_ConfigChannel+0x6e8>)
 80026ac:	e009      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x6ee>
 80026ae:	bf00      	nop
 80026b0:	407f0000 	.word	0x407f0000
 80026b4:	80080000 	.word	0x80080000
 80026b8:	50000100 	.word	0x50000100
 80026bc:	50000300 	.word	0x50000300
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_ADC_ConfigChannel+0x854>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f91a 	bl	80018fc <LL_ADC_GetCommonPathInternalCh>
 80026c8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_ADC_ConfigChannel+0x858>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x70c>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a55      	ldr	r2, [pc, #340]	@ (8002830 <HAL_ADC_ConfigChannel+0x85c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d13a      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d134      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f4:	d005      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x72e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a4e      	ldr	r2, [pc, #312]	@ (8002834 <HAL_ADC_ConfigChannel+0x860>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f040 8085 	bne.w	800280c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270a:	d004      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x742>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a49      	ldr	r2, [pc, #292]	@ (8002838 <HAL_ADC_ConfigChannel+0x864>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x746>
 8002716:	4a49      	ldr	r2, [pc, #292]	@ (800283c <HAL_ADC_ConfigChannel+0x868>)
 8002718:	e000      	b.n	800271c <HAL_ADC_ConfigChannel+0x748>
 800271a:	4a43      	ldr	r2, [pc, #268]	@ (8002828 <HAL_ADC_ConfigChannel+0x854>)
 800271c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002720:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7ff f8d5 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800272c:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_ADC_ConfigChannel+0x86c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	4a44      	ldr	r2, [pc, #272]	@ (8002844 <HAL_ADC_ConfigChannel+0x870>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002746:	e002      	b.n	800274e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3b01      	subs	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002754:	e05a      	b.n	800280c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3b      	ldr	r2, [pc, #236]	@ (8002848 <HAL_ADC_ConfigChannel+0x874>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d125      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11f      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a31      	ldr	r2, [pc, #196]	@ (8002838 <HAL_ADC_ConfigChannel+0x864>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d104      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x7ac>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a34      	ldr	r2, [pc, #208]	@ (800284c <HAL_ADC_ConfigChannel+0x878>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d047      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x7c0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <HAL_ADC_ConfigChannel+0x864>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x7c4>
 8002794:	4a29      	ldr	r2, [pc, #164]	@ (800283c <HAL_ADC_ConfigChannel+0x868>)
 8002796:	e000      	b.n	800279a <HAL_ADC_ConfigChannel+0x7c6>
 8002798:	4a23      	ldr	r2, [pc, #140]	@ (8002828 <HAL_ADC_ConfigChannel+0x854>)
 800279a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7ff f896 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027aa:	e031      	b.n	8002810 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a27      	ldr	r2, [pc, #156]	@ (8002850 <HAL_ADC_ConfigChannel+0x87c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12d      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d127      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_ADC_ConfigChannel+0x864>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x80c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_ADC_ConfigChannel+0x864>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x810>
 80027e0:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_ADC_ConfigChannel+0x868>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x812>
 80027e4:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <HAL_ADC_ConfigChannel+0x854>)
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7ff f870 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
 80027f6:	e00c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800280a:	e002      	b.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002810:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800281a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800281e:	4618      	mov	r0, r3
 8002820:	37d8      	adds	r7, #216	@ 0xd8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	50000700 	.word	0x50000700
 800282c:	c3210000 	.word	0xc3210000
 8002830:	90c00010 	.word	0x90c00010
 8002834:	50000600 	.word	0x50000600
 8002838:	50000100 	.word	0x50000100
 800283c:	50000300 	.word	0x50000300
 8002840:	20000000 	.word	0x20000000
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	c7520000 	.word	0xc7520000
 800284c:	50000500 	.word	0x50000500
 8002850:	cb840000 	.word	0xcb840000

08002854 <LL_ADC_IsEnabled>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <LL_ADC_IsEnabled+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_IsEnabled+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b0a1      	sub	sp, #132	@ 0x84
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0e7      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028c6:	2300      	movs	r3, #0
 80028c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ca:	2300      	movs	r3, #0
 80028cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d6:	d102      	bne.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e009      	b.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d102      	bne.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80028e8:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	e001      	b.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0be      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ffb1 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002918:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ffab 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80a0 	bne.w	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800292c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 809c 	bne.w	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800293c:	d004      	beq.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a55      	ldr	r2, [pc, #340]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002948:	4b56      	ldr	r3, [pc, #344]	@ (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800294a:	e000      	b.n	800294e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800294c:	4b56      	ldr	r3, [pc, #344]	@ (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800294e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d04b      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800296a:	035b      	lsls	r3, r3, #13
 800296c:	430b      	orrs	r3, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002972:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297c:	d004      	beq.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a45      	ldr	r2, [pc, #276]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002988:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800298c:	f7ff ff62 	bl	8002854 <LL_ADC_IsEnabled>
 8002990:	4604      	mov	r4, r0
 8002992:	4841      	ldr	r0, [pc, #260]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002994:	f7ff ff5e 	bl	8002854 <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	4323      	orrs	r3, r4
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029a8:	483c      	ldr	r0, [pc, #240]	@ (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029aa:	f7ff ff53 	bl	8002854 <LL_ADC_IsEnabled>
 80029ae:	4604      	mov	r4, r0
 80029b0:	483b      	ldr	r0, [pc, #236]	@ (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029b2:	f7ff ff4f 	bl	8002854 <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	431c      	orrs	r4, r3
 80029ba:	483c      	ldr	r0, [pc, #240]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029bc:	f7ff ff4a 	bl	8002854 <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4323      	orrs	r3, r4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d056      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6811      	ldr	r1, [r2, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029ee:	e047      	b.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a04:	d004      	beq.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a23      	ldr	r2, [pc, #140]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10f      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a14:	f7ff ff1e 	bl	8002854 <LL_ADC_IsEnabled>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	481f      	ldr	r0, [pc, #124]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a1c:	f7ff ff1a 	bl	8002854 <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e012      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a30:	481a      	ldr	r0, [pc, #104]	@ (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a32:	f7ff ff0f 	bl	8002854 <LL_ADC_IsEnabled>
 8002a36:	4604      	mov	r4, r0
 8002a38:	4819      	ldr	r0, [pc, #100]	@ (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a3a:	f7ff ff0b 	bl	8002854 <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	431c      	orrs	r4, r3
 8002a42:	481a      	ldr	r0, [pc, #104]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a44:	f7ff ff06 	bl	8002854 <LL_ADC_IsEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4323      	orrs	r3, r4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a62:	f023 030f 	bic.w	r3, r3, #15
 8002a66:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6a:	e009      	b.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a7e:	e000      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3784      	adds	r7, #132	@ 0x84
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	50000100 	.word	0x50000100
 8002a9c:	50000400 	.word	0x50000400
 8002aa0:	50000500 	.word	0x50000500
 8002aa4:	50000300 	.word	0x50000300
 8002aa8:	50000700 	.word	0x50000700
 8002aac:	50000600 	.word	0x50000600

08002ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <__NVIC_EnableIRQ+0x38>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff29 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff40 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff90 	bl	8002ba4 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5f 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff33 	bl	8002b14 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa4 	bl	8002c0c <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e014      	b.n	8002d0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe fa55 	bl	80011a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_DAC_ConfigChannel+0x1c>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e1a1      	b.n	8003078 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_DAC_ConfigChannel+0x32>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e198      	b.n	8003078 <HAL_DAC_ConfigChannel+0x364>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d17a      	bne.n	8002e50 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fd9d 	bl	8001898 <HAL_GetTick>
 8002d5e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d13d      	bne.n	8002de2 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d66:	e018      	b.n	8002d9a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d68:	f7fe fd96 	bl	8001898 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d911      	bls.n	8002d9a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2203      	movs	r2, #3
 8002d94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e16e      	b.n	8003078 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1df      	bne.n	8002d68 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002db2:	e020      	b.n	8002df6 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002db4:	f7fe fd70 	bl	8001898 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d90f      	bls.n	8002de2 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	da0a      	bge.n	8002de2 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f043 0208 	orr.w	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e14a      	b.n	8003078 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dbe3      	blt.n	8002db4 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	ea02 0103 	and.w	r1, r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	21ff      	movs	r1, #255	@ 0xff
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	ea02 0103 	and.w	r1, r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d11d      	bne.n	8002e94 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	221f      	movs	r2, #31
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e70:	4013      	ands	r3, r2
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	4013      	ands	r3, r2
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d102      	bne.n	8002ebe <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	e00f      	b.n	8002ede <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d102      	bne.n	8002ecc <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	e008      	b.n	8002ede <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	e001      	b.n	8002ede <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	4013      	ands	r3, r2
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <HAL_DAC_ConfigChannel+0x1fe>
 8002f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f10:	e000      	b.n	8002f14 <HAL_DAC_ConfigChannel+0x200>
 8002f12:	2300      	movs	r3, #0
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	795b      	ldrb	r3, [r3, #5]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0x22a>
 8002f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3c:	e000      	b.n	8002f40 <HAL_DAC_ConfigChannel+0x22c>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d114      	bne.n	8002f80 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f56:	f001 fa3f 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8002f5a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_DAC_ConfigChannel+0x36c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d904      	bls.n	8002f6e <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6c:	e00f      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4a44      	ldr	r2, [pc, #272]	@ (8003084 <HAL_DAC_ConfigChannel+0x370>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90a      	bls.n	8002f8c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7e:	e006      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f86:	4313      	orrs	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	e000      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002f8c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	22c0      	movs	r2, #192	@ 0xc0
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	ea02 0103 	and.w	r1, r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	409a      	lsls	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003076:	7ffb      	ldrb	r3, [r7, #31]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	09896800 	.word	0x09896800
 8003084:	04c4b400 	.word	0x04c4b400

08003088 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d005      	beq.n	80030ac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	e037      	b.n	800311c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020e 	bic.w	r2, r2, #14
 80030ba:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ca:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030f8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003110:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800311a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d00d      	beq.n	800316e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e047      	b.n	80031fe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 020e 	bic.w	r2, r2, #14
 800317c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800319c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f003 021f 	and.w	r2, r3, #31
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
    }
  }
  return status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e147      	b.n	80034aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fff4 	bl	800121c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0210 	bic.w	r2, r2, #16
 8003242:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003244:	f7fe fb28 	bl	8001898 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800324a:	e012      	b.n	8003272 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800324c:	f7fe fb24 	bl	8001898 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d90b      	bls.n	8003272 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e11b      	b.n	80034aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b08      	cmp	r3, #8
 800327e:	d0e5      	beq.n	800324c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003290:	f7fe fb02 	bl	8001898 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003296:	e012      	b.n	80032be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003298:	f7fe fafe 	bl	8001898 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b0a      	cmp	r3, #10
 80032a4:	d90b      	bls.n	80032be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2203      	movs	r2, #3
 80032b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0f5      	b.n	80034aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0e5      	beq.n	8003298 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0202 	orr.w	r2, r2, #2
 80032da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a74      	ldr	r2, [pc, #464]	@ (80034b4 <HAL_FDCAN_Init+0x2ac>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d103      	bne.n	80032ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80032e6:	4a74      	ldr	r2, [pc, #464]	@ (80034b8 <HAL_FDCAN_Init+0x2b0>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7c1b      	ldrb	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003304:	619a      	str	r2, [r3, #24]
 8003306:	e007      	b.n	8003318 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003316:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7c5b      	ldrb	r3, [r3, #17]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d108      	bne.n	8003332 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	e007      	b.n	8003342 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003340:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7c9b      	ldrb	r3, [r3, #18]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003358:	619a      	str	r2, [r3, #24]
 800335a:	e007      	b.n	800336c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800336a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003390:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0210 	bic.w	r2, r2, #16
 80033a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0204 	orr.w	r2, r2, #4
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	e02c      	b.n	8003416 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d028      	beq.n	8003416 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d01c      	beq.n	8003406 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0210 	orr.w	r2, r2, #16
 80033ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d110      	bne.n	8003416 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0220 	orr.w	r2, r2, #32
 8003402:	619a      	str	r2, [r3, #24]
 8003404:	e007      	b.n	8003416 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	3b01      	subs	r3, #1
 800341c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	3b01      	subs	r3, #1
 8003424:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003426:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800342e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	3b01      	subs	r3, #1
 8003438:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800343e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003440:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800344a:	d115      	bne.n	8003478 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	3b01      	subs	r3, #1
 8003458:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800345a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	3b01      	subs	r3, #1
 8003462:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003464:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	3b01      	subs	r3, #1
 800346e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003474:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003476:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f814 	bl	80034bc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40006400 	.word	0x40006400
 80034b8:	40006500 	.word	0x40006500

080034bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80034c4:	4b30      	ldr	r3, [pc, #192]	@ (8003588 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80034c6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2f      	ldr	r2, [pc, #188]	@ (800358c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d103      	bne.n	80034da <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80034d8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80034ea:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034fa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003520:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	061a      	lsls	r2, r3, #24
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e005      	b.n	800356e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	429a      	cmp	r2, r3
 8003578:	d3f3      	bcc.n	8003562 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	4000a400 	.word	0x4000a400
 800358c:	40006800 	.word	0x40006800
 8003590:	40006c00 	.word	0x40006c00

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035a2:	e15a      	b.n	800385a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 814c 	beq.w	8003854 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0201 	and.w	r2, r3, #1
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d017      	beq.n	8003672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d123      	bne.n	80036c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a6 	beq.w	8003854 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003708:	4b5b      	ldr	r3, [pc, #364]	@ (8003878 <HAL_GPIO_Init+0x2e4>)
 800370a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370c:	4a5a      	ldr	r2, [pc, #360]	@ (8003878 <HAL_GPIO_Init+0x2e4>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6613      	str	r3, [r2, #96]	@ 0x60
 8003714:	4b58      	ldr	r3, [pc, #352]	@ (8003878 <HAL_GPIO_Init+0x2e4>)
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003720:	4a56      	ldr	r2, [pc, #344]	@ (800387c <HAL_GPIO_Init+0x2e8>)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800374a:	d01f      	beq.n	800378c <HAL_GPIO_Init+0x1f8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4c      	ldr	r2, [pc, #304]	@ (8003880 <HAL_GPIO_Init+0x2ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d019      	beq.n	8003788 <HAL_GPIO_Init+0x1f4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4b      	ldr	r2, [pc, #300]	@ (8003884 <HAL_GPIO_Init+0x2f0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_GPIO_Init+0x1f0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4a      	ldr	r2, [pc, #296]	@ (8003888 <HAL_GPIO_Init+0x2f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00d      	beq.n	8003780 <HAL_GPIO_Init+0x1ec>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a49      	ldr	r2, [pc, #292]	@ (800388c <HAL_GPIO_Init+0x2f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x1e8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a48      	ldr	r2, [pc, #288]	@ (8003890 <HAL_GPIO_Init+0x2fc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_GPIO_Init+0x1e4>
 8003774:	2305      	movs	r3, #5
 8003776:	e00a      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 8003778:	2306      	movs	r3, #6
 800377a:	e008      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 800377c:	2304      	movs	r3, #4
 800377e:	e006      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 8003780:	2303      	movs	r3, #3
 8003782:	e004      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 8003784:	2302      	movs	r3, #2
 8003786:	e002      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_GPIO_Init+0x1fa>
 800378c:	2300      	movs	r3, #0
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800379e:	4937      	ldr	r1, [pc, #220]	@ (800387c <HAL_GPIO_Init+0x2e8>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ac:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <HAL_GPIO_Init+0x300>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d0:	4a30      	ldr	r2, [pc, #192]	@ (8003894 <HAL_GPIO_Init+0x300>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003894 <HAL_GPIO_Init+0x300>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fa:	4a26      	ldr	r2, [pc, #152]	@ (8003894 <HAL_GPIO_Init+0x300>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003800:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_GPIO_Init+0x300>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003824:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_GPIO_Init+0x300>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800382a:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <HAL_GPIO_Init+0x300>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800384e:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <HAL_GPIO_Init+0x300>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f ae9d 	bne.w	80035a4 <HAL_GPIO_Init+0x10>
  }
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40021000 	.word	0x40021000
 800387c:	40010000 	.word	0x40010000
 8003880:	48000400 	.word	0x48000400
 8003884:	48000800 	.word	0x48000800
 8003888:	48000c00 	.word	0x48000c00
 800388c:	48001000 	.word	0x48001000
 8003890:	48001400 	.word	0x48001400
 8003894:	40010400 	.word	0x40010400

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038de:	4a05      	ldr	r2, [pc, #20]	@ (80038f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f806 	bl	80038f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40010400 	.word	0x40010400

080038f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d141      	bne.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800391e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d131      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800392c:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003932:	4a46      	ldr	r2, [pc, #280]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003944:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394c:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2232      	movs	r2, #50	@ 0x32
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	4a3f      	ldr	r2, [pc, #252]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003962:	e002      	b.n	800396a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3b01      	subs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396a:	4b38      	ldr	r3, [pc, #224]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003976:	d102      	bne.n	800397e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f2      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397e:	4b33      	ldr	r3, [pc, #204]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d158      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e057      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003990:	4b2e      	ldr	r3, [pc, #184]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003996:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039a0:	e04d      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a8:	d141      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039aa:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b6:	d131      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b8:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039be:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039d0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2232      	movs	r2, #50	@ 0x32
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ee:	e002      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a02:	d102      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f2      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d112      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e011      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a2c:	e007      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a36:	4a05      	ldr	r2, [pc, #20]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	20000000 	.word	0x20000000
 8003a54:	431bde83 	.word	0x431bde83

08003a58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a66:	6093      	str	r3, [r2, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40007000 	.word	0x40007000

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e2fe      	b.n	8004088 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b97      	ldr	r3, [pc, #604]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b94      	ldr	r3, [pc, #592]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3e>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_OscConfig+0x44>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d10b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05b      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d157      	bne.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e2d9      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x74>
 8003ade:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a84      	ldr	r2, [pc, #528]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7b      	ldr	r2, [pc, #492]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003b10:	4b78      	ldr	r3, [pc, #480]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a77      	ldr	r2, [pc, #476]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b75      	ldr	r3, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a74      	ldr	r2, [pc, #464]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd feb2 	bl	8001898 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd feae 	bl	8001898 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	@ 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e29e      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fe9e 	bl	8001898 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd fe9a 	bl	8001898 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e28a      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	4b60      	ldr	r3, [pc, #384]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d075      	beq.n	8003c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8e:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b98:	4b56      	ldr	r3, [pc, #344]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_OscConfig+0x136>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x13c>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11f      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x154>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e25d      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b49      	ldr	r3, [pc, #292]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	4946      	ldr	r1, [pc, #280]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be0:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fe0b 	bl	8001800 <HAL_InitTick>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e249      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d023      	beq.n	8003c44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd fe46 	bl	8001898 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fd fe42 	bl	8001898 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e232      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c22:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	492d      	ldr	r1, [pc, #180]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
 8003c42:	e01a      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fe22 	bl	8001898 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fd fe1e 	bl	8001898 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e20e      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6a:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1e0>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d041      	beq.n	8003d0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c94:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fd fdfb 	bl	8001898 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fdf7 	bl	8001898 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1e7      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ef      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x22e>
 8003cc6:	e020      	b.n	8003d0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fdde 	bl	8001898 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cde:	e00d      	b.n	8003cfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fdda 	bl	8001898 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d906      	bls.n	8003cfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ca      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ea      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80a6 	beq.w	8003e64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d1c:	4b84      	ldr	r3, [pc, #528]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2b4>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b7f      	ldr	r3, [pc, #508]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4a7e      	ldr	r2, [pc, #504]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b79      	ldr	r3, [pc, #484]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5a:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fd97 	bl	8001898 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fd fd93 	bl	8001898 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e183      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_RCC_OscConfig+0x32e>
 8003d94:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003da4:	e024      	b.n	8003df0 <HAL_RCC_OscConfig+0x378>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d110      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x358>
 8003dae:	4b60      	ldr	r3, [pc, #384]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dce:	e00f      	b.n	8003df0 <HAL_RCC_OscConfig+0x378>
 8003dd0:	4b57      	ldr	r3, [pc, #348]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fd fd4e 	bl	8001898 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fd fd4a 	bl	8001898 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e138      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCC_OscConfig+0x388>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd fd37 	bl	8001898 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fd33 	bl	8001898 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e121      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e44:	4b3a      	ldr	r3, [pc, #232]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ed      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	4a34      	ldr	r2, [pc, #208]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d03c      	beq.n	8003eea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e78:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fd06 	bl	8001898 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e90:	f7fd fd02 	bl	8001898 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0f2      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCC_OscConfig+0x418>
 8003eb0:	e01b      	b.n	8003eea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fd fce9 	bl	8001898 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eca:	f7fd fce5 	bl	8001898 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0d5      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ef      	bne.n	8003eca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80c9 	beq.w	8004086 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	f000 8083 	beq.w	8004008 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d15e      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a08      	ldr	r2, [pc, #32]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fcbf 	bl	8001898 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fcbb 	bl	8001898 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d905      	bls.n	8003f38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0ab      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	4b55      	ldr	r3, [pc, #340]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ec      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f44:	4b52      	ldr	r3, [pc, #328]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCC_OscConfig+0x61c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6a11      	ldr	r1, [r2, #32]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f5e:	0212      	lsls	r2, r2, #8
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0552      	lsls	r2, r2, #21
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0652      	lsls	r2, r2, #25
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f7e:	06d2      	lsls	r2, r2, #27
 8003f80:	430a      	orrs	r2, r1
 8003f82:	4943      	ldr	r1, [pc, #268]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a40      	ldr	r2, [pc, #256]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f94:	4b3e      	ldr	r3, [pc, #248]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a3d      	ldr	r2, [pc, #244]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fc7a 	bl	8001898 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fc76 	bl	8001898 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e066      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	4b35      	ldr	r3, [pc, #212]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x530>
 8003fc6:	e05e      	b.n	8004086 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a30      	ldr	r2, [pc, #192]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fc60 	bl	8001898 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fc5c 	bl	8001898 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e04c      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ffa:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4924      	ldr	r1, [pc, #144]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCC_OscConfig+0x620>)
 8004002:	4013      	ands	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
 8004006:	e03e      	b.n	8004086 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e039      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004014:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	429a      	cmp	r2, r3
 8004026:	d12c      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d123      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d11b      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d113      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	019f800c 	.word	0x019f800c
 8004098:	feeefffc 	.word	0xfeeefffc

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e11e      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b91      	ldr	r3, [pc, #580]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b8e      	ldr	r3, [pc, #568]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	498c      	ldr	r1, [pc, #560]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b8a      	ldr	r3, [pc, #552]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e106      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d073      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d129      	bne.n	800414c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	4b81      	ldr	r3, [pc, #516]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0f4      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004108:	f000 f99e 	bl	8004448 <RCC_GetSysClockFreqFromPLLSource>
 800410c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a7c      	ldr	r2, [pc, #496]	@ (8004304 <HAL_RCC_ClockConfig+0x268>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d93f      	bls.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004116:	4b7a      	ldr	r3, [pc, #488]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d033      	beq.n	8004196 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d12f      	bne.n	8004196 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004136:	4b72      	ldr	r3, [pc, #456]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413e:	4a70      	ldr	r2, [pc, #448]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004144:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e024      	b.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d107      	bne.n	8004164 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004154:	4b6a      	ldr	r3, [pc, #424]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0c6      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004164:	4b66      	ldr	r3, [pc, #408]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0be      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004174:	f000 f8ce 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8004178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4a61      	ldr	r2, [pc, #388]	@ (8004304 <HAL_RCC_ClockConfig+0x268>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d909      	bls.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004182:	4b5f      	ldr	r3, [pc, #380]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418a:	4a5d      	ldr	r2, [pc, #372]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800418c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004190:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b5a      	ldr	r3, [pc, #360]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4957      	ldr	r1, [pc, #348]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd fb76 	bl	8001898 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fd fb72 	bl	8001898 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e095      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 020c 	and.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d1eb      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d023      	beq.n	800422c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a42      	ldr	r2, [pc, #264]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004208:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004210:	4a3b      	ldr	r2, [pc, #236]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004216:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004218:	4b39      	ldr	r3, [pc, #228]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4936      	ldr	r1, [pc, #216]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
 800422a:	e008      	b.n	800423e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b80      	cmp	r3, #128	@ 0x80
 8004230:	d105      	bne.n	800423e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004232:	4b33      	ldr	r3, [pc, #204]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004238:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423e:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d21d      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 020f 	bic.w	r2, r3, #15
 8004254:	4929      	ldr	r1, [pc, #164]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800425c:	f7fd fb1c 	bl	8001898 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fd fb18 	bl	8001898 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e03b      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d1ed      	bne.n	8004264 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4917      	ldr	r1, [pc, #92]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490f      	ldr	r1, [pc, #60]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c6:	f000 f825 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490c      	ldr	r1, [pc, #48]	@ (8004308 <HAL_RCC_ClockConfig+0x26c>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <HAL_RCC_ClockConfig+0x270>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_ClockConfig+0x274>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fa88 	bl	8001800 <HAL_InitTick>
 80042f0:	4603      	mov	r3, r0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40022000 	.word	0x40022000
 8004300:	40021000 	.word	0x40021000
 8004304:	04c4b400 	.word	0x04c4b400
 8004308:	080074a0 	.word	0x080074a0
 800430c:	20000000 	.word	0x20000000
 8004310:	20000004 	.word	0x20000004

08004314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800431a:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d102      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004326:	4b2a      	ldr	r3, [pc, #168]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e047      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800432c:	4b27      	ldr	r3, [pc, #156]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b08      	cmp	r3, #8
 8004336:	d102      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004338:	4b26      	ldr	r3, [pc, #152]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e03e      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800433e:	4b23      	ldr	r3, [pc, #140]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d136      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004354:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	3301      	adds	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d10c      	bne.n	8004382 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004368:	4a1a      	ldr	r2, [pc, #104]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	68d2      	ldr	r2, [r2, #12]
 8004374:	0a12      	lsrs	r2, r2, #8
 8004376:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	617b      	str	r3, [r7, #20]
      break;
 8004380:	e00c      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4a10      	ldr	r2, [pc, #64]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	0a12      	lsrs	r2, r2, #8
 8004390:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
      break;
 800439a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	0e5b      	lsrs	r3, r3, #25
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e001      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043bc:	693b      	ldr	r3, [r7, #16]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	016e3600 	.word	0x016e3600

080043d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043dc:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <HAL_RCC_GetHCLKFreq+0x14>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000000 	.word	0x20000000

080043f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043f4:	f7ff fff0 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	080074b0 	.word	0x080074b0

0800441c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004420:	f7ff ffda 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0adb      	lsrs	r3, r3, #11
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4904      	ldr	r1, [pc, #16]	@ (8004444 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	080074b0 	.word	0x080074b0

08004448 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444e:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004458:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d10c      	bne.n	8004486 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800446c:	4a17      	ldr	r2, [pc, #92]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	4a14      	ldr	r2, [pc, #80]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004476:	68d2      	ldr	r2, [r2, #12]
 8004478:	0a12      	lsrs	r2, r2, #8
 800447a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	617b      	str	r3, [r7, #20]
    break;
 8004484:	e00c      	b.n	80044a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	4a0e      	ldr	r2, [pc, #56]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004490:	68d2      	ldr	r2, [r2, #12]
 8004492:	0a12      	lsrs	r2, r2, #8
 8004494:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    break;
 800449e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	0e5b      	lsrs	r3, r3, #25
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	3301      	adds	r3, #1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044ba:	687b      	ldr	r3, [r7, #4]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40021000 	.word	0x40021000
 80044cc:	016e3600 	.word	0x016e3600
 80044d0:	00f42400 	.word	0x00f42400

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044dc:	2300      	movs	r3, #0
 80044de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8098 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b43      	ldr	r3, [pc, #268]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6593      	str	r3, [r2, #88]	@ 0x58
 800450e:	4b3d      	ldr	r3, [pc, #244]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451e:	4b3a      	ldr	r3, [pc, #232]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a39      	ldr	r2, [pc, #228]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800452a:	f7fd f9b5 	bl	8001898 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	e009      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fd f9b1 	bl	8001898 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d902      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	74fb      	strb	r3, [r7, #19]
        break;
 8004544:	e005      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004546:	4b30      	ldr	r3, [pc, #192]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d159      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004558:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004562:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01e      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d019      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004574:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004580:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004590:	4b1c      	ldr	r3, [pc, #112]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	4a1b      	ldr	r2, [pc, #108]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd f971 	bl	8001898 <HAL_GetTick>
 80045b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	e00b      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd f96d 	bl	8001898 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d902      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	74fb      	strb	r3, [r7, #19]
            break;
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ec      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f4:	4903      	ldr	r1, [pc, #12]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
 8004602:	e005      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004610:	7c7b      	ldrb	r3, [r7, #17]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4ba7      	ldr	r3, [pc, #668]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	4aa6      	ldr	r2, [pc, #664]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004620:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462e:	4ba1      	ldr	r3, [pc, #644]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f023 0203 	bic.w	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	499d      	ldr	r1, [pc, #628]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004650:	4b98      	ldr	r3, [pc, #608]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 020c 	bic.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4995      	ldr	r1, [pc, #596]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004672:	4b90      	ldr	r3, [pc, #576]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	498c      	ldr	r1, [pc, #560]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004694:	4b87      	ldr	r3, [pc, #540]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4984      	ldr	r1, [pc, #528]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046b6:	4b7f      	ldr	r3, [pc, #508]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	497b      	ldr	r1, [pc, #492]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	4973      	ldr	r1, [pc, #460]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fa:	4b6e      	ldr	r3, [pc, #440]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	496a      	ldr	r1, [pc, #424]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800471c:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4962      	ldr	r1, [pc, #392]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	4959      	ldr	r1, [pc, #356]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004760:	4b54      	ldr	r3, [pc, #336]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	4951      	ldr	r1, [pc, #324]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004782:	4b4c      	ldr	r3, [pc, #304]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	4948      	ldr	r1, [pc, #288]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a4:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	4940      	ldr	r1, [pc, #256]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3a      	ldr	r2, [pc, #232]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047dc:	4b35      	ldr	r3, [pc, #212]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	4932      	ldr	r1, [pc, #200]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a2c      	ldr	r2, [pc, #176]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004806:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	4924      	ldr	r1, [pc, #144]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004832:	d105      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800483e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486c:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a10      	ldr	r2, [pc, #64]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004876:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d019      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	4908      	ldr	r1, [pc, #32]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a2:	d109      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a02      	ldr	r2, [pc, #8]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ae:	60d3      	str	r3, [r2, #12]
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048c4:	4b29      	ldr	r3, [pc, #164]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	4926      	ldr	r1, [pc, #152]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048e4:	4b21      	ldr	r3, [pc, #132]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a20      	ldr	r2, [pc, #128]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	4918      	ldr	r1, [pc, #96]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d105      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800491c:	4b13      	ldr	r3, [pc, #76]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a12      	ldr	r2, [pc, #72]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004926:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004934:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	490a      	ldr	r1, [pc, #40]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004960:	7cbb      	ldrb	r3, [r7, #18]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e09d      	b.n	8004abe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d108      	bne.n	800499c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004992:	d009      	beq.n	80049a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
 800499a:	e005      	b.n	80049a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fce4 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049e8:	d902      	bls.n	80049f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e002      	b.n	80049f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80049fe:	d007      	beq.n	8004a10 <HAL_SPI_Init+0xa0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	ea42 0103 	orr.w	r1, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	f003 0204 	and.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a8c:	ea42 0103 	orr.w	r1, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10f      	bne.n	8004b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
    return;
 8004b0a:	e0d7      	b.n	8004cbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x66>
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
    return;
 8004b2c:	e0c6      	b.n	8004cbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_SPI_IRQHandler+0x8c>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80b4 	beq.w	8004cbc <HAL_SPI_IRQHandler+0x1f4>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80ad 	beq.w	8004cbc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d011      	beq.n	8004b9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7e:	f043 0204 	orr.w	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
        return;
 8004bb4:	e082      	b.n	8004cbc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfc:	f043 0208 	orr.w	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04f      	beq.n	8004cba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_SPI_IRQHandler+0x17e>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d034      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0203 	bic.w	r2, r2, #3
 8004c54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d011      	beq.n	8004c82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8004c64:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fa65 	bl	800313a <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8004c90:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fa4f 	bl	800313a <HAL_DMA_Abort_IT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004cae:	e003      	b.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f809 	bl	8004cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cb6:	e000      	b.n	8004cba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004cb8:	bf00      	nop
    return;
 8004cba:	bf00      	nop
  }
}
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08004cdd 	.word	0x08004cdd

08004cc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff ffe5 	bl	8004cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e049      	b.n	8004dac <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fc fc13 	bl	8001558 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f000 fad7 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e097      	b.n	8004ef8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fc fb73 	bl	80014c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fa75 	bl	80052f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	4313      	orrs	r3, r2
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e54:	f023 030c 	bic.w	r3, r3, #12
 8004e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	4313      	orrs	r3, r2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	011a      	lsls	r2, r3, #4
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	031b      	lsls	r3, r3, #12
 8004e84:	4313      	orrs	r3, r2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0202 	mvn.w	r2, #2
 8004f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9b6 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9a8 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f9b9 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0204 	mvn.w	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f990 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f982 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f993 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0208 	mvn.w	r2, #8
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f96a 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f95c 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f96d 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f944 	bl	80052bc <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f936 	bl	80052a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f947 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f914 	bl	8005294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 ff63 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 ff5b 	bl	8005f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f901 	bl	80052e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0220 	mvn.w	r2, #32
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 ff23 	bl	8005f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 ff2f 	bl	8005f88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00c      	beq.n	800514e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 ff27 	bl	8005f9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800516a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 ff1f 	bl	8005fb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 ff17 	bl	8005fc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_TIM_OC_ConfigChannel+0x1e>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e066      	b.n	800528c <HAL_TIM_OC_ConfigChannel+0xec>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b14      	cmp	r3, #20
 80051ca:	d857      	bhi.n	800527c <HAL_TIM_OC_ConfigChannel+0xdc>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005229 	.word	0x08005229
 80051d8:	0800527d 	.word	0x0800527d
 80051dc:	0800527d 	.word	0x0800527d
 80051e0:	0800527d 	.word	0x0800527d
 80051e4:	08005237 	.word	0x08005237
 80051e8:	0800527d 	.word	0x0800527d
 80051ec:	0800527d 	.word	0x0800527d
 80051f0:	0800527d 	.word	0x0800527d
 80051f4:	08005245 	.word	0x08005245
 80051f8:	0800527d 	.word	0x0800527d
 80051fc:	0800527d 	.word	0x0800527d
 8005200:	0800527d 	.word	0x0800527d
 8005204:	08005253 	.word	0x08005253
 8005208:	0800527d 	.word	0x0800527d
 800520c:	0800527d 	.word	0x0800527d
 8005210:	0800527d 	.word	0x0800527d
 8005214:	08005261 	.word	0x08005261
 8005218:	0800527d 	.word	0x0800527d
 800521c:	0800527d 	.word	0x0800527d
 8005220:	0800527d 	.word	0x0800527d
 8005224:	0800526f 	.word	0x0800526f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f916 	bl	8005460 <TIM_OC1_SetConfig>
      break;
 8005234:	e025      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f9a9 	bl	8005594 <TIM_OC2_SetConfig>
      break;
 8005242:	e01e      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa36 	bl	80056bc <TIM_OC3_SetConfig>
      break;
 8005250:	e017      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fac1 	bl	80057e0 <TIM_OC4_SetConfig>
      break;
 800525e:	e010      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fb4e 	bl	8005908 <TIM_OC5_SetConfig>
      break;
 800526c:	e009      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fbb1 	bl	80059dc <TIM_OC6_SetConfig>
      break;
 800527a:	e002      	b.n	8005282 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
      break;
 8005280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a4c      	ldr	r2, [pc, #304]	@ (800543c <TIM_Base_SetConfig+0x144>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d017      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	d013      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a49      	ldr	r2, [pc, #292]	@ (8005440 <TIM_Base_SetConfig+0x148>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00f      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a48      	ldr	r2, [pc, #288]	@ (8005444 <TIM_Base_SetConfig+0x14c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a47      	ldr	r2, [pc, #284]	@ (8005448 <TIM_Base_SetConfig+0x150>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a46      	ldr	r2, [pc, #280]	@ (800544c <TIM_Base_SetConfig+0x154>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a45      	ldr	r2, [pc, #276]	@ (8005450 <TIM_Base_SetConfig+0x158>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d108      	bne.n	8005352 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a39      	ldr	r2, [pc, #228]	@ (800543c <TIM_Base_SetConfig+0x144>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d023      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005360:	d01f      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a36      	ldr	r2, [pc, #216]	@ (8005440 <TIM_Base_SetConfig+0x148>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <TIM_Base_SetConfig+0x14c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a34      	ldr	r2, [pc, #208]	@ (8005448 <TIM_Base_SetConfig+0x150>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a33      	ldr	r2, [pc, #204]	@ (800544c <TIM_Base_SetConfig+0x154>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a33      	ldr	r2, [pc, #204]	@ (8005454 <TIM_Base_SetConfig+0x15c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <TIM_Base_SetConfig+0x160>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a31      	ldr	r2, [pc, #196]	@ (800545c <TIM_Base_SetConfig+0x164>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2c      	ldr	r2, [pc, #176]	@ (8005450 <TIM_Base_SetConfig+0x158>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a18      	ldr	r2, [pc, #96]	@ (800543c <TIM_Base_SetConfig+0x144>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x110>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <TIM_Base_SetConfig+0x154>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x110>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005454 <TIM_Base_SetConfig+0x15c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x110>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <TIM_Base_SetConfig+0x160>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x110>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a18      	ldr	r2, [pc, #96]	@ (800545c <TIM_Base_SetConfig+0x164>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a13      	ldr	r2, [pc, #76]	@ (8005450 <TIM_Base_SetConfig+0x158>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d103      	bne.n	8005410 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]
  }
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40013400 	.word	0x40013400
 8005450:	40015000 	.word	0x40015000
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800

08005460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 0201 	bic.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 0302 	bic.w	r3, r3, #2
 80054ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a30      	ldr	r2, [pc, #192]	@ (800557c <TIM_OC1_SetConfig+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <TIM_OC1_SetConfig+0x88>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005580 <TIM_OC1_SetConfig+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00f      	beq.n	80054e8 <TIM_OC1_SetConfig+0x88>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005584 <TIM_OC1_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_OC1_SetConfig+0x88>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005588 <TIM_OC1_SetConfig+0x128>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_OC1_SetConfig+0x88>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a2c      	ldr	r2, [pc, #176]	@ (800558c <TIM_OC1_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005590 <TIM_OC1_SetConfig+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10c      	bne.n	8005502 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0308 	bic.w	r3, r3, #8
 80054ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0304 	bic.w	r3, r3, #4
 8005500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <TIM_OC1_SetConfig+0x11c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_OC1_SetConfig+0xd2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1c      	ldr	r2, [pc, #112]	@ (8005580 <TIM_OC1_SetConfig+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_OC1_SetConfig+0xd2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <TIM_OC1_SetConfig+0x124>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_OC1_SetConfig+0xd2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1a      	ldr	r2, [pc, #104]	@ (8005588 <TIM_OC1_SetConfig+0x128>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_OC1_SetConfig+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a19      	ldr	r2, [pc, #100]	@ (800558c <TIM_OC1_SetConfig+0x12c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <TIM_OC1_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800
 8005590:	40015000 	.word	0x40015000

08005594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 0210 	bic.w	r2, r3, #16
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	@ (80056a4 <TIM_OC2_SetConfig+0x110>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC2_SetConfig+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	@ (80056a8 <TIM_OC2_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a2a      	ldr	r2, [pc, #168]	@ (80056ac <TIM_OC2_SetConfig+0x118>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d10d      	bne.n	8005624 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1f      	ldr	r2, [pc, #124]	@ (80056a4 <TIM_OC2_SetConfig+0x110>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_OC2_SetConfig+0xc0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1e      	ldr	r2, [pc, #120]	@ (80056a8 <TIM_OC2_SetConfig+0x114>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00f      	beq.n	8005654 <TIM_OC2_SetConfig+0xc0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <TIM_OC2_SetConfig+0x11c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_OC2_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1d      	ldr	r2, [pc, #116]	@ (80056b4 <TIM_OC2_SetConfig+0x120>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_OC2_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <TIM_OC2_SetConfig+0x124>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a17      	ldr	r2, [pc, #92]	@ (80056ac <TIM_OC2_SetConfig+0x118>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d113      	bne.n	800567c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800565a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40015000 	.word	0x40015000
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800

080056bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <TIM_OC3_SetConfig+0x10c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC3_SetConfig+0x72>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2a      	ldr	r2, [pc, #168]	@ (80057cc <TIM_OC3_SetConfig+0x110>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0x72>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a29      	ldr	r2, [pc, #164]	@ (80057d0 <TIM_OC3_SetConfig+0x114>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <TIM_OC3_SetConfig+0x10c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <TIM_OC3_SetConfig+0xbe>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1d      	ldr	r2, [pc, #116]	@ (80057cc <TIM_OC3_SetConfig+0x110>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00f      	beq.n	800577a <TIM_OC3_SetConfig+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <TIM_OC3_SetConfig+0x118>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_OC3_SetConfig+0xbe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <TIM_OC3_SetConfig+0x11c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_OC3_SetConfig+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <TIM_OC3_SetConfig+0x120>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_OC3_SetConfig+0x114>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d113      	bne.n	80057a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40015000 	.word	0x40015000
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800581a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800582e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <TIM_OC4_SetConfig+0x110>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC4_SetConfig+0x74>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2b      	ldr	r2, [pc, #172]	@ (80058f4 <TIM_OC4_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC4_SetConfig+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a2a      	ldr	r2, [pc, #168]	@ (80058f8 <TIM_OC4_SetConfig+0x118>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10d      	bne.n	8005870 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800585a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800586e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <TIM_OC4_SetConfig+0x110>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_OC4_SetConfig+0xc0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <TIM_OC4_SetConfig+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_OC4_SetConfig+0xc0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1e      	ldr	r2, [pc, #120]	@ (80058fc <TIM_OC4_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_OC4_SetConfig+0xc0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <TIM_OC4_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_OC4_SetConfig+0xc0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1c      	ldr	r2, [pc, #112]	@ (8005904 <TIM_OC4_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a17      	ldr	r2, [pc, #92]	@ (80058f8 <TIM_OC4_SetConfig+0x118>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d113      	bne.n	80058c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40015000 	.word	0x40015000
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800

08005908 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800594c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a19      	ldr	r2, [pc, #100]	@ (80059c4 <TIM_OC5_SetConfig+0xbc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <TIM_OC5_SetConfig+0x82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <TIM_OC5_SetConfig+0xc0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00f      	beq.n	800598a <TIM_OC5_SetConfig+0x82>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_OC5_SetConfig+0xc4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_OC5_SetConfig+0x82>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_OC5_SetConfig+0xc8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_OC5_SetConfig+0x82>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_OC5_SetConfig+0xcc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a14      	ldr	r2, [pc, #80]	@ (80059d8 <TIM_OC5_SetConfig+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d109      	bne.n	800599e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	621a      	str	r2, [r3, #32]
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800
 80059d8:	40015000 	.word	0x40015000

080059dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	051b      	lsls	r3, r3, #20
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a1a      	ldr	r2, [pc, #104]	@ (8005a9c <TIM_OC6_SetConfig+0xc0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_OC6_SetConfig+0x84>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <TIM_OC6_SetConfig+0xc4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC6_SetConfig+0x84>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a18      	ldr	r2, [pc, #96]	@ (8005aa4 <TIM_OC6_SetConfig+0xc8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC6_SetConfig+0x84>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <TIM_OC6_SetConfig+0xcc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC6_SetConfig+0x84>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a16      	ldr	r2, [pc, #88]	@ (8005aac <TIM_OC6_SetConfig+0xd0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a15      	ldr	r2, [pc, #84]	@ (8005ab0 <TIM_OC6_SetConfig+0xd4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800
 8005ab0:	40015000 	.word	0x40015000

08005ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e074      	b.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a33      	ldr	r2, [pc, #204]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a31      	ldr	r2, [pc, #196]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d01d      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a15      	ldr	r2, [pc, #84]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10c      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40013400 	.word	0x40013400
 8005bcc:	40015000 	.word	0x40015000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40014000 	.word	0x40014000

08005be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e078      	b.n	8005cee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1c      	ldr	r2, [pc, #112]	@ (8005cfc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	@ (8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d11c      	bne.n	8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	051b      	lsls	r3, r3, #20
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40015000 	.word	0x40015000

08005d08 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b08b      	sub	sp, #44	@ 0x2c
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIMEx_ConfigBreakInput+0x20>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e10b      	b.n	8005f40 <HAL_TIMEx_ConfigBreakInput+0x238>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b80      	cmp	r3, #128	@ 0x80
 8005d36:	f000 8096 	beq.w	8005e66 <HAL_TIMEx_ConfigBreakInput+0x15e>
 8005d3a:	2b80      	cmp	r3, #128	@ 0x80
 8005d3c:	f200 809c 	bhi.w	8005e78 <HAL_TIMEx_ConfigBreakInput+0x170>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d849      	bhi.n	8005dd8 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8097 	beq.w	8005e78 <HAL_TIMEx_ConfigBreakInput+0x170>
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	2b1f      	cmp	r3, #31
 8005d4e:	f200 8093 	bhi.w	8005e78 <HAL_TIMEx_ConfigBreakInput+0x170>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <HAL_TIMEx_ConfigBreakInput+0x50>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005ddf 	.word	0x08005ddf
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005e79 	.word	0x08005e79
 8005d64:	08005e07 	.word	0x08005e07
 8005d68:	08005e79 	.word	0x08005e79
 8005d6c:	08005e79 	.word	0x08005e79
 8005d70:	08005e79 	.word	0x08005e79
 8005d74:	08005e1b 	.word	0x08005e1b
 8005d78:	08005e79 	.word	0x08005e79
 8005d7c:	08005e79 	.word	0x08005e79
 8005d80:	08005e79 	.word	0x08005e79
 8005d84:	08005e79 	.word	0x08005e79
 8005d88:	08005e79 	.word	0x08005e79
 8005d8c:	08005e79 	.word	0x08005e79
 8005d90:	08005e79 	.word	0x08005e79
 8005d94:	08005e2f 	.word	0x08005e2f
 8005d98:	08005e79 	.word	0x08005e79
 8005d9c:	08005e79 	.word	0x08005e79
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005e79 	.word	0x08005e79
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e79 	.word	0x08005e79
 8005dbc:	08005e79 	.word	0x08005e79
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e79 	.word	0x08005e79
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e43 	.word	0x08005e43
 8005dd8:	2b40      	cmp	r3, #64	@ 0x40
 8005dda:	d03b      	beq.n	8005e54 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8005ddc:	e04c      	b.n	8005e78 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8005de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dea:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8005dec:	2309      	movs	r3, #9
 8005dee:	617b      	str	r3, [r7, #20]
      break;
 8005df0:	e04b      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8005df2:	2302      	movs	r3, #2
 8005df4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8005df6:	2301      	movs	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8005dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dfe:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8005e00:	230a      	movs	r3, #10
 8005e02:	617b      	str	r3, [r7, #20]
      break;
 8005e04:	e041      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP2)
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8005e06:	2304      	movs	r3, #4
 8005e08:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8005e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005e12:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8005e14:	230b      	movs	r3, #11
 8005e16:	617b      	str	r3, [r7, #20]
      break;
 8005e18:	e037      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP2 */
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8005e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e26:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8005e28:	230c      	movs	r3, #12
 8005e2a:	617b      	str	r3, [r7, #20]
      break;
 8005e2c:	e02d      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP4)
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8005e2e:	2310      	movs	r3, #16
 8005e30:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8005e32:	2304      	movs	r3, #4
 8005e34:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8005e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e3a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	617b      	str	r3, [r7, #20]
      break;
 8005e40:	e023      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP4 */
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8005e42:	2320      	movs	r3, #32
 8005e44:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8005e46:	2305      	movs	r3, #5
 8005e48:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
      break;
 8005e52:	e01a      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8005e54:	2340      	movs	r3, #64	@ 0x40
 8005e56:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8005e58:	2306      	movs	r3, #6
 8005e5a:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
      break;
 8005e64:	e011      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8005e6a:	2307      	movs	r3, #7
 8005e6c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
      break;
 8005e76:	e008      	b.n	8005e8a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
      break;
 8005e88:	bf00      	nop
    }
  }

  switch (BreakInput)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d003      	beq.n	8005e98 <HAL_TIMEx_ConfigBreakInput+0x190>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d025      	beq.n	8005ee2 <HAL_TIMEx_ConfigBreakInput+0x1da>
 8005e96:	e049      	b.n	8005f2c <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8005ee0:	e028      	b.n	8005f34 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee8:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	409a      	lsls	r2, r3
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	4013      	ands	r3, r2
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	409a      	lsls	r2, r3
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005f2a:	e003      	b.n	8005f34 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	372c      	adds	r7, #44	@ 0x2c
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e042      	b.n	8006070 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fb f967 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2224      	movs	r2, #36	@ 0x24
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fe86 	bl	8006d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb87 	bl	800673c <UART_SetConfig>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e01b      	b.n	8006070 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 ff05 	bl	8006e78 <UART_CheckIdleState>
 800606e:	4603      	mov	r3, r0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b0ba      	sub	sp, #232	@ 0xe8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800609e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80060a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80060a6:	4013      	ands	r3, r2
 80060a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80060ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d11b      	bne.n	80060ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8300 	beq.w	80066e2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
      }
      return;
 80060ea:	e2fa      	b.n	80066e2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8123 	beq.w	800633c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006330 <HAL_UART_IRQHandler+0x2b8>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006106:	4b8b      	ldr	r3, [pc, #556]	@ (8006334 <HAL_UART_IRQHandler+0x2bc>)
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8116 	beq.w	800633c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <HAL_UART_IRQHandler+0xc8>
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2201      	movs	r2, #1
 800612e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f043 0201 	orr.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d011      	beq.n	8006170 <HAL_UART_IRQHandler+0xf8>
 800614c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2202      	movs	r2, #2
 800615e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d011      	beq.n	80061a0 <HAL_UART_IRQHandler+0x128>
 800617c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2204      	movs	r2, #4
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006196:	f043 0202 	orr.w	r2, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80061b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006330 <HAL_UART_IRQHandler+0x2b8>)
 80061be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2208      	movs	r2, #8
 80061ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	f043 0208 	orr.w	r2, r3, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d012      	beq.n	800620e <HAL_UART_IRQHandler+0x196>
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00c      	beq.n	800620e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8266 	beq.w	80066e6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006254:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d005      	beq.n	8006272 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800626a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d054      	beq.n	800631c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 ff17 	bl	80070a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d146      	bne.n	8006314 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800629c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1d9      	bne.n	8006286 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <HAL_UART_IRQHandler+0x2c0>)
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fc ff24 	bl	800313a <HAL_DMA_Abort_IT>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006306:	4610      	mov	r0, r2
 8006308:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630a:	e00f      	b.n	800632c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f9ff 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	e00b      	b.n	800632c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f9fb 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631a:	e007      	b.n	800632c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9f7 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800632a:	e1dc      	b.n	80066e6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	bf00      	nop
    return;
 800632e:	e1da      	b.n	80066e6 <HAL_UART_IRQHandler+0x66e>
 8006330:	10000001 	.word	0x10000001
 8006334:	04000120 	.word	0x04000120
 8006338:	08007173 	.word	0x08007173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 8170 	bne.w	8006626 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8169 	beq.w	8006626 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8162 	beq.w	8006626 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2210      	movs	r2, #16
 8006368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	f040 80d8 	bne.w	800652a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80af 	beq.w	80064f0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006398:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800639c:	429a      	cmp	r2, r3
 800639e:	f080 80a7 	bcs.w	80064f0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 8087 	bne.w	80064ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1da      	bne.n	80063c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800641a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800642e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e1      	bne.n	800640a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3308      	adds	r3, #8
 8006466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800646a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800646c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e3      	bne.n	8006446 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800649a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649c:	f023 0310 	bic.w	r3, r3, #16
 80064a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e4      	bne.n	800648c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fc fddd 	bl	8003088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f91b 	bl	8006724 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80064ee:	e0fc      	b.n	80066ea <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064fa:	429a      	cmp	r2, r3
 80064fc:	f040 80f5 	bne.w	80066ea <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	f040 80eb 	bne.w	80066ea <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8fe 	bl	8006724 <HAL_UARTEx_RxEventCallback>
      return;
 8006528:	e0df      	b.n	80066ea <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006536:	b29b      	uxth	r3, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80d1 	beq.w	80066ee <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800654c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80cc 	beq.w	80066ee <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800656a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006578:	647b      	str	r3, [r7, #68]	@ 0x44
 800657a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800657e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e4      	bne.n	8006556 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	623b      	str	r3, [r7, #32]
   return(result);
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e1      	bne.n	800658c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	617b      	str	r3, [r7, #20]
   return(result);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e4      	bne.n	80065dc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f880 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006624:	e063      	b.n	80066ee <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <HAL_UART_IRQHandler+0x5d8>
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006646:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fdcf 	bl	80071ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664e:	e051      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d014      	beq.n	8006686 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006678:	2b00      	cmp	r3, #0
 800667a:	d03a      	beq.n	80066f2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
    }
    return;
 8006684:	e035      	b.n	80066f2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_UART_IRQHandler+0x62e>
 8006692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fd79 	bl	8007196 <UART_EndTransmit_IT>
    return;
 80066a4:	e026      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_UART_IRQHandler+0x64e>
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fda8 	bl	8007214 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c4:	e016      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <HAL_UART_IRQHandler+0x67c>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da0c      	bge.n	80066f4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fd90 	bl	8007200 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066e0:	e008      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80066e2:	bf00      	nop
 80066e4:	e006      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80066f2:	bf00      	nop
  }
}
 80066f4:	37e8      	adds	r7, #232	@ 0xe8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop

080066fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006740:	b08c      	sub	sp, #48	@ 0x30
 8006742:	af00      	add	r7, sp, #0
 8006744:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	431a      	orrs	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	4313      	orrs	r3, r2
 8006762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4baa      	ldr	r3, [pc, #680]	@ (8006a14 <UART_SetConfig+0x2d8>)
 800676c:	4013      	ands	r3, r2
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006774:	430b      	orrs	r3, r1
 8006776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a9f      	ldr	r2, [pc, #636]	@ (8006a18 <UART_SetConfig+0x2dc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a4:	4313      	orrs	r3, r2
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80067b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067bc:	430b      	orrs	r3, r1
 80067be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c6:	f023 010f 	bic.w	r1, r3, #15
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a90      	ldr	r2, [pc, #576]	@ (8006a1c <UART_SetConfig+0x2e0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d125      	bne.n	800682c <UART_SetConfig+0xf0>
 80067e0:	4b8f      	ldr	r3, [pc, #572]	@ (8006a20 <UART_SetConfig+0x2e4>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d81a      	bhi.n	8006824 <UART_SetConfig+0xe8>
 80067ee:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0xb8>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006815 	.word	0x08006815
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	0800681d 	.word	0x0800681d
 8006804:	2301      	movs	r3, #1
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680a:	e116      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006812:	e112      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681a:	e10e      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006822:	e10a      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e106      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7c      	ldr	r2, [pc, #496]	@ (8006a24 <UART_SetConfig+0x2e8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d138      	bne.n	80068a8 <UART_SetConfig+0x16c>
 8006836:	4b7a      	ldr	r3, [pc, #488]	@ (8006a20 <UART_SetConfig+0x2e4>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d82d      	bhi.n	80068a0 <UART_SetConfig+0x164>
 8006844:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0x110>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006881 	.word	0x08006881
 8006850:	080068a1 	.word	0x080068a1
 8006854:	080068a1 	.word	0x080068a1
 8006858:	080068a1 	.word	0x080068a1
 800685c:	08006891 	.word	0x08006891
 8006860:	080068a1 	.word	0x080068a1
 8006864:	080068a1 	.word	0x080068a1
 8006868:	080068a1 	.word	0x080068a1
 800686c:	08006889 	.word	0x08006889
 8006870:	080068a1 	.word	0x080068a1
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068a1 	.word	0x080068a1
 800687c:	08006899 	.word	0x08006899
 8006880:	2300      	movs	r3, #0
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006886:	e0d8      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006888:	2302      	movs	r3, #2
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688e:	e0d4      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006890:	2304      	movs	r3, #4
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006896:	e0d0      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006898:	2308      	movs	r3, #8
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689e:	e0cc      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a6:	e0c8      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5e      	ldr	r2, [pc, #376]	@ (8006a28 <UART_SetConfig+0x2ec>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d125      	bne.n	80068fe <UART_SetConfig+0x1c2>
 80068b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a20 <UART_SetConfig+0x2e4>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068bc:	2b30      	cmp	r3, #48	@ 0x30
 80068be:	d016      	beq.n	80068ee <UART_SetConfig+0x1b2>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d818      	bhi.n	80068f6 <UART_SetConfig+0x1ba>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d00a      	beq.n	80068de <UART_SetConfig+0x1a2>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d814      	bhi.n	80068f6 <UART_SetConfig+0x1ba>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <UART_SetConfig+0x19a>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d008      	beq.n	80068e6 <UART_SetConfig+0x1aa>
 80068d4:	e00f      	b.n	80068f6 <UART_SetConfig+0x1ba>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068dc:	e0ad      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068de:	2302      	movs	r3, #2
 80068e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e4:	e0a9      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068e6:	2304      	movs	r3, #4
 80068e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ec:	e0a5      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068ee:	2308      	movs	r3, #8
 80068f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f4:	e0a1      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068f6:	2310      	movs	r3, #16
 80068f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fc:	e09d      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a4a      	ldr	r2, [pc, #296]	@ (8006a2c <UART_SetConfig+0x2f0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d125      	bne.n	8006954 <UART_SetConfig+0x218>
 8006908:	4b45      	ldr	r3, [pc, #276]	@ (8006a20 <UART_SetConfig+0x2e4>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006912:	2bc0      	cmp	r3, #192	@ 0xc0
 8006914:	d016      	beq.n	8006944 <UART_SetConfig+0x208>
 8006916:	2bc0      	cmp	r3, #192	@ 0xc0
 8006918:	d818      	bhi.n	800694c <UART_SetConfig+0x210>
 800691a:	2b80      	cmp	r3, #128	@ 0x80
 800691c:	d00a      	beq.n	8006934 <UART_SetConfig+0x1f8>
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d814      	bhi.n	800694c <UART_SetConfig+0x210>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <UART_SetConfig+0x1f0>
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	d008      	beq.n	800693c <UART_SetConfig+0x200>
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x210>
 800692c:	2300      	movs	r3, #0
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006932:	e082      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693a:	e07e      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e07a      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e076      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e072      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a35      	ldr	r2, [pc, #212]	@ (8006a30 <UART_SetConfig+0x2f4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12a      	bne.n	80069b4 <UART_SetConfig+0x278>
 800695e:	4b30      	ldr	r3, [pc, #192]	@ (8006a20 <UART_SetConfig+0x2e4>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800696c:	d01a      	beq.n	80069a4 <UART_SetConfig+0x268>
 800696e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006972:	d81b      	bhi.n	80069ac <UART_SetConfig+0x270>
 8006974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006978:	d00c      	beq.n	8006994 <UART_SetConfig+0x258>
 800697a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697e:	d815      	bhi.n	80069ac <UART_SetConfig+0x270>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <UART_SetConfig+0x250>
 8006984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006988:	d008      	beq.n	800699c <UART_SetConfig+0x260>
 800698a:	e00f      	b.n	80069ac <UART_SetConfig+0x270>
 800698c:	2300      	movs	r3, #0
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006992:	e052      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006994:	2302      	movs	r3, #2
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699a:	e04e      	b.n	8006a3a <UART_SetConfig+0x2fe>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a2:	e04a      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069aa:	e046      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b2:	e042      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a17      	ldr	r2, [pc, #92]	@ (8006a18 <UART_SetConfig+0x2dc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d13a      	bne.n	8006a34 <UART_SetConfig+0x2f8>
 80069be:	4b18      	ldr	r3, [pc, #96]	@ (8006a20 <UART_SetConfig+0x2e4>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069cc:	d01a      	beq.n	8006a04 <UART_SetConfig+0x2c8>
 80069ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d2:	d81b      	bhi.n	8006a0c <UART_SetConfig+0x2d0>
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d8:	d00c      	beq.n	80069f4 <UART_SetConfig+0x2b8>
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069de:	d815      	bhi.n	8006a0c <UART_SetConfig+0x2d0>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <UART_SetConfig+0x2b0>
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e8:	d008      	beq.n	80069fc <UART_SetConfig+0x2c0>
 80069ea:	e00f      	b.n	8006a0c <UART_SetConfig+0x2d0>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e022      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e01e      	b.n	8006a3a <UART_SetConfig+0x2fe>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e01a      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e016      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	e012      	b.n	8006a3a <UART_SetConfig+0x2fe>
 8006a14:	cfff69f3 	.word	0xcfff69f3
 8006a18:	40008000 	.word	0x40008000
 8006a1c:	40013800 	.word	0x40013800
 8006a20:	40021000 	.word	0x40021000
 8006a24:	40004400 	.word	0x40004400
 8006a28:	40004800 	.word	0x40004800
 8006a2c:	40004c00 	.word	0x40004c00
 8006a30:	40005000 	.word	0x40005000
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4aae      	ldr	r2, [pc, #696]	@ (8006cf8 <UART_SetConfig+0x5bc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	f040 8097 	bne.w	8006b74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d823      	bhi.n	8006a96 <UART_SetConfig+0x35a>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <UART_SetConfig+0x318>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a87 	.word	0x08006a87
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a97 	.word	0x08006a97
 8006a70:	08006a97 	.word	0x08006a97
 8006a74:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fd fcba 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b9e      	ldr	r3, [pc, #632]	@ (8006cfc <UART_SetConfig+0x5c0>)
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fd fc45 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8006a8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8130 	beq.w	8006d0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	4a94      	ldr	r2, [pc, #592]	@ (8006d00 <UART_SetConfig+0x5c4>)
 8006ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d305      	bcc.n	8006ada <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d903      	bls.n	8006ae2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ae0:	e113      	b.n	8006d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	60bb      	str	r3, [r7, #8]
 8006ae8:	60fa      	str	r2, [r7, #12]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	4a84      	ldr	r2, [pc, #528]	@ (8006d00 <UART_SetConfig+0x5c4>)
 8006af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2200      	movs	r2, #0
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b04:	f7f9 fb88 	bl	8000218 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	020b      	lsls	r3, r1, #8
 8006b1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b1e:	0202      	lsls	r2, r0, #8
 8006b20:	6979      	ldr	r1, [r7, #20]
 8006b22:	6849      	ldr	r1, [r1, #4]
 8006b24:	0849      	lsrs	r1, r1, #1
 8006b26:	2000      	movs	r0, #0
 8006b28:	460c      	mov	r4, r1
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	eb12 0804 	adds.w	r8, r2, r4
 8006b30:	eb43 0905 	adc.w	r9, r3, r5
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	469a      	mov	sl, r3
 8006b3c:	4693      	mov	fp, r2
 8006b3e:	4652      	mov	r2, sl
 8006b40:	465b      	mov	r3, fp
 8006b42:	4640      	mov	r0, r8
 8006b44:	4649      	mov	r1, r9
 8006b46:	f7f9 fb67 	bl	8000218 <__aeabi_uldivmod>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4613      	mov	r3, r2
 8006b50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b58:	d308      	bcc.n	8006b6c <UART_SetConfig+0x430>
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b60:	d204      	bcs.n	8006b6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	e0ce      	b.n	8006d0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b72:	e0ca      	b.n	8006d0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7c:	d166      	bne.n	8006c4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d827      	bhi.n	8006bd6 <UART_SetConfig+0x49a>
 8006b86:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <UART_SetConfig+0x450>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bc1 	.word	0x08006bc1
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bc7 	.word	0x08006bc7
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bd7 	.word	0x08006bd7
 8006ba8:	08006bd7 	.word	0x08006bd7
 8006bac:	08006bcf 	.word	0x08006bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fd fc1e 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bb6:	e014      	b.n	8006be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb8:	f7fd fc30 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 8006bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bbe:	e010      	b.n	8006be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8006cfc <UART_SetConfig+0x5c0>)
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7fd fba5 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8006bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bcc:	e009      	b.n	8006be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bd4:	e005      	b.n	8006be2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8090 	beq.w	8006d0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	4a44      	ldr	r2, [pc, #272]	@ (8006d00 <UART_SetConfig+0x5c4>)
 8006bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bfc:	005a      	lsls	r2, r3, #1
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	441a      	add	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d916      	bls.n	8006c44 <UART_SetConfig+0x508>
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1c:	d212      	bcs.n	8006c44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f023 030f 	bic.w	r3, r3, #15
 8006c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	8bfb      	ldrh	r3, [r7, #30]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	8bfa      	ldrh	r2, [r7, #30]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	e062      	b.n	8006d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c4a:	e05e      	b.n	8006d0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d828      	bhi.n	8006ca6 <UART_SetConfig+0x56a>
 8006c54:	a201      	add	r2, pc, #4	@ (adr r2, 8006c5c <UART_SetConfig+0x520>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c89 	.word	0x08006c89
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006ca7 	.word	0x08006ca7
 8006c6c:	08006c97 	.word	0x08006c97
 8006c70:	08006ca7 	.word	0x08006ca7
 8006c74:	08006ca7 	.word	0x08006ca7
 8006c78:	08006ca7 	.word	0x08006ca7
 8006c7c:	08006c9f 	.word	0x08006c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c80:	f7fd fbb6 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8006c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c86:	e014      	b.n	8006cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fd fbc8 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 8006c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c8e:	e010      	b.n	8006cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	@ (8006cfc <UART_SetConfig+0x5c0>)
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c94:	e00d      	b.n	8006cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c96:	f7fd fb3d 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8006c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c9c:	e009      	b.n	8006cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ca4:	e005      	b.n	8006cb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d028      	beq.n	8006d0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	4a10      	ldr	r2, [pc, #64]	@ (8006d00 <UART_SetConfig+0x5c4>)
 8006cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	441a      	add	r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d910      	bls.n	8006d04 <UART_SetConfig+0x5c8>
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d20c      	bcs.n	8006d04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	e009      	b.n	8006d0a <UART_SetConfig+0x5ce>
 8006cf6:	bf00      	nop
 8006cf8:	40008000 	.word	0x40008000
 8006cfc:	00f42400 	.word	0x00f42400
 8006d00:	080074b8 	.word	0x080074b8
      }
      else
      {
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2200      	movs	r2, #0
 8006d24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d26:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3730      	adds	r7, #48	@ 0x30
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e32:	d10a      	bne.n	8006e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b098      	sub	sp, #96	@ 0x60
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e88:	f7fa fd06 	bl	8001898 <HAL_GetTick>
 8006e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d12f      	bne.n	8006efc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f88e 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d022      	beq.n	8006efc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e063      	b.n	8006fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d149      	bne.n	8006f9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f857 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d03c      	beq.n	8006f9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	623b      	str	r3, [r7, #32]
   return(result);
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f76:	61fa      	str	r2, [r7, #28]
 8006f78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	69b9      	ldr	r1, [r7, #24]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	617b      	str	r3, [r7, #20]
   return(result);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e5      	bne.n	8006f56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e012      	b.n	8006fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3758      	adds	r7, #88	@ 0x58
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e04f      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d04b      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fa fc57 	bl	8001898 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e04e      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d037      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d034      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d031      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d110      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f838 	bl	80070a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2208      	movs	r2, #8
 800703a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e029      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007058:	d111      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f81e 	bl	80070a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d0a0      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b095      	sub	sp, #84	@ 0x54
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800710a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e3      	bne.n	80070e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d118      	bne.n	8007152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	60bb      	str	r3, [r7, #8]
   return(result);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f023 0310 	bic.w	r3, r3, #16
 8007134:	647b      	str	r3, [r7, #68]	@ 0x44
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6979      	ldr	r1, [r7, #20]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	613b      	str	r3, [r7, #16]
   return(result);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e6      	bne.n	8007120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007166:	bf00      	nop
 8007168:	3754      	adds	r7, #84	@ 0x54
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fac1 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b088      	sub	sp, #32
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fa8c 	bl	80066fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e4:	bf00      	nop
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_UARTEx_DisableFifoMode+0x16>
 800723a:	2302      	movs	r3, #2
 800723c:	e027      	b.n	800728e <HAL_UARTEx_DisableFifoMode+0x66>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2224      	movs	r2, #36	@ 0x24
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0201 	bic.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800726c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e02d      	b.n	800730e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2224      	movs	r2, #36	@ 0x24
 80072be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f850 	bl	8007394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800732a:	2302      	movs	r3, #2
 800732c:	e02d      	b.n	800738a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2224      	movs	r2, #36	@ 0x24
 800733a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0201 	bic.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f812 	bl	8007394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073b4:	e031      	b.n	800741a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073b6:	2308      	movs	r3, #8
 80073b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ba:	2308      	movs	r3, #8
 80073bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	0e5b      	lsrs	r3, r3, #25
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	0f5b      	lsrs	r3, r3, #29
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	7b3a      	ldrb	r2, [r7, #12]
 80073e2:	4911      	ldr	r1, [pc, #68]	@ (8007428 <UARTEx_SetNbDataToProcess+0x94>)
 80073e4:	5c8a      	ldrb	r2, [r1, r2]
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ea:	7b3a      	ldrb	r2, [r7, #12]
 80073ec:	490f      	ldr	r1, [pc, #60]	@ (800742c <UARTEx_SetNbDataToProcess+0x98>)
 80073ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	7b7a      	ldrb	r2, [r7, #13]
 8007400:	4909      	ldr	r1, [pc, #36]	@ (8007428 <UARTEx_SetNbDataToProcess+0x94>)
 8007402:	5c8a      	ldrb	r2, [r1, r2]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	4908      	ldr	r1, [pc, #32]	@ (800742c <UARTEx_SetNbDataToProcess+0x98>)
 800740c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800740e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	080074d0 	.word	0x080074d0
 800742c:	080074d8 	.word	0x080074d8

08007430 <memset>:
 8007430:	4402      	add	r2, r0
 8007432:	4603      	mov	r3, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <__libc_init_array>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4d0d      	ldr	r5, [pc, #52]	@ (8007478 <__libc_init_array+0x38>)
 8007444:	4c0d      	ldr	r4, [pc, #52]	@ (800747c <__libc_init_array+0x3c>)
 8007446:	1b64      	subs	r4, r4, r5
 8007448:	10a4      	asrs	r4, r4, #2
 800744a:	2600      	movs	r6, #0
 800744c:	42a6      	cmp	r6, r4
 800744e:	d109      	bne.n	8007464 <__libc_init_array+0x24>
 8007450:	4d0b      	ldr	r5, [pc, #44]	@ (8007480 <__libc_init_array+0x40>)
 8007452:	4c0c      	ldr	r4, [pc, #48]	@ (8007484 <__libc_init_array+0x44>)
 8007454:	f000 f818 	bl	8007488 <_init>
 8007458:	1b64      	subs	r4, r4, r5
 800745a:	10a4      	asrs	r4, r4, #2
 800745c:	2600      	movs	r6, #0
 800745e:	42a6      	cmp	r6, r4
 8007460:	d105      	bne.n	800746e <__libc_init_array+0x2e>
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	f855 3b04 	ldr.w	r3, [r5], #4
 8007468:	4798      	blx	r3
 800746a:	3601      	adds	r6, #1
 800746c:	e7ee      	b.n	800744c <__libc_init_array+0xc>
 800746e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007472:	4798      	blx	r3
 8007474:	3601      	adds	r6, #1
 8007476:	e7f2      	b.n	800745e <__libc_init_array+0x1e>
 8007478:	080074e8 	.word	0x080074e8
 800747c:	080074e8 	.word	0x080074e8
 8007480:	080074e8 	.word	0x080074e8
 8007484:	080074ec 	.word	0x080074ec

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
